model CastingFunctionsModel;

type string String min-size:0 max-size:255;
type boolean Boolean;

entity A {
    field String nameA;
}

entity B extends A {
    field String nameB;
}

entity CA extends B {
    field String nameCA;
}

entity CB extends B {
    field String nameCB;
}

entity Tester {
    relation B b;
    relation B[] bs;
    relation B caAsB;
    relation B[] caAsBs;

    // kind of
    field Boolean kindOfA <= self.b!kindOf(entityType = A);        // true
    field Boolean kindOfB <= self.b!kindOf(entityType = B);        // true
    field Boolean kindOfCA <= self.b!kindOf(entityType = CA);      // false
    field Boolean kindOfCA1 <= self.caAsB!kindOf(entityType = CA); // true
    field Boolean kindOfCB <= self.b!kindOf(entityType = CB);      // false

    // type of
    field Boolean typeOfA <= self.b!typeOf(entityType = A);        // false
    field Boolean typeOfB <= self.b!typeOf(entityType = B);        // true
    field Boolean typeOfCA <= self.b!typeOf(entityType = CA);      // false
    field Boolean typeOfCA1 <= self.caAsB!typeOf(entityType = CA); // true
    field Boolean typeOfCB <= self.b!typeOf(entityType = CB);      // false

    // as type
    relation A asTypeA <= self.b!asType(entityType = A);         // B
    relation B asTypeB <= self.b!asType(entityType = B);         // B
    relation CA asTypeCA <= self.b!asType(entityType = CA);      // undefined
    relation CA asTypeCA1 <= self.caAsB!asType(entityType = CA); // CA
    relation CB asTypeCB <= self.b!asType(entityType = CB);      // undefined

    // as collection
    relation A[] asCollectionA <= self.bs!asCollection(entityType = A);         // B-s
    relation B[] asCollectionB <= self.bs!asCollection(entityType = B);         // B-s
    relation CA[] asCollectionCA <= self.bs!asCollection(entityType = CA);      // empty
    relation CA[] asCollectionCA1 <= self.caAsBs!asCollection(entityType = CA); // CA-s
    relation CB[] asCollectionCB <= self.bs!asCollection(entityType = CB);      // empty

}
