model Functions;

import FunctionsExternals as FE;

type numeric Integer precision:15 scale:0;
type numeric Scaled precision:15 scale:2;
type string String min-size:0 max-size:128;
type boolean Boolean;
type date Date;
type timestamp Timestamp;
type time Time;
type binary Binary mime-type:["text/plain"] max-file-size:1 GB;

enum MyEnum {
    Atomic = 0;
    Bombastic = 1;
    Crazy = 2;
}

entity Simple {
	field String stringAttr;
	field Integer firstNum <= Simple!all()!first(s | s.stringAttr)!size();
}

entity Entity {
    field Integer integerAttr;
    field Scaled scaledAttr;
    field String stringAttr;
    field Boolean boolAttr;
    field Date dateAttr;
    field Timestamp timestampAttr;
    field Time timeAttr;
}

entity EntityWithPrimitiveDefaults {
    field Integer integerAttr = 1;
    field Scaled scaledAttr = 2.34;
    field String stringAttr = "test";
    field Boolean boolAttr = true;
    field Date dateAttr = `2022-07-11`;
    field Timestamp timestampAttr = `2022-07-11T19:09:33Z`;
    field Time timeAttr = `23:59:59`;
}
entity Functions {
    field Entity `entity`;
    field EntityWithPrimitiveDefaults entityWithPrimitives;
}

entity AnyTypeFunctions extends Functions {

    field Boolean integerIsDefinedFalse <= self.`entity`.integerAttr!isDefined();
    field Boolean integerIsDefinedTrue <= self.entityWithPrimitives.integerAttr!isDefined();
    field Boolean integerIsUndefinedTrue <= self.`entity`.integerAttr!isUndefined();
    field Boolean integerIsUndefinedFalse <= self.entityWithPrimitives.integerAttr!isUndefined();

    field Boolean scaledIsDefinedFalse <= self.`entity`.scaledAttr!isDefined();
    field Boolean scaledIsDefinedTrue <= self.entityWithPrimitives.scaledAttr!isDefined();
    field Boolean scaledIsUndefinedTrue <= self.`entity`.scaledAttr!isUndefined();
    field Boolean scaledIsUndefinedFalse <= self.entityWithPrimitives.scaledAttr!isUndefined();

    field Boolean stringIsDefinedFalse <= self.`entity`.stringAttr!isDefined();
    field Boolean stringIsDefinedTrue <= self.entityWithPrimitives.stringAttr!isDefined();
    field Boolean stringIsUndefinedTrue <= self.`entity`.stringAttr!isUndefined();
    field Boolean stringIsUndefinedFalse <= self.entityWithPrimitives.stringAttr!isUndefined();

    field Boolean boolIsDefinedFalse <= self.`entity`.boolAttr!isDefined();
    field Boolean boolIsDefinedTrue <= self.entityWithPrimitives.boolAttr!isDefined();
    field Boolean boolIsUndefinedTrue <= self.`entity`.boolAttr!isUndefined();
    field Boolean boolIsUndefinedFalse <= self.entityWithPrimitives.boolAttr!isUndefined();

    field Boolean dateIsDefinedFalse <= self.`entity`.dateAttr!isDefined();
    field Boolean dateIsDefinedTrue <= self.entityWithPrimitives.dateAttr!isDefined();
    field Boolean dateIsUndefinedTrue <= self.`entity`.dateAttr!isUndefined();
    field Boolean dateIsUndefinedFalse <= self.entityWithPrimitives.dateAttr!isUndefined();

    field Boolean timestampIsDefinedFalse <= self.`entity`.timestampAttr!isDefined();
    field Boolean timestampIsDefinedTrue <= self.entityWithPrimitives.timestampAttr!isDefined();
    field Boolean timestampIsUndefinedTrue <= self.`entity`.timestampAttr!isUndefined();
    field Boolean timestampIsUndefinedFalse <= self.entityWithPrimitives.timestampAttr!isUndefined();

    field Boolean timeIsDefinedFalse <= self.`entity`.timeAttr!isDefined();
    field Boolean timeIsDefinedTrue <= self.entityWithPrimitives.timeAttr!isDefined();
    field Boolean timeIsUndefinedTrue <= self.`entity`.timeAttr!isUndefined();
    field Boolean timeIsUndefinedFalse <= self.entityWithPrimitives.timeAttr!isUndefined();

    field String stringOrElse <= "apple"!orElse(value = "grape");
    field Integer numberOrElse <= 2!orElse(value = 1);
    field Integer numberOrElse2 <= self.`entity`.integerAttr!orElse(value = 3);
    field Integer numberOrElse3 <= self.`entity`.integerAttr!orElse(value = -4.9)!abs()!orElse(value = 0!abs())!floor();
}

entity StringFunctions {
    field String undefined;

    field Integer length <= "apple"!size();
    field String first <= "apple"!left(count = 2);
    field String last <= "apple"!right(count = 1);
    field Integer position <= "apple"!position(substring = "p");
    field String substring <= "apple"!substring(count = 2, offset = 3);
    field String lower <= "ApPlE"!lower();
    field String lowerCase <= "ApPlE"!lower();
    field String upper <= "ApPlE"!upper();
    field String upperCase <= "ApPlE"!upper();
    field String capitalize <= "apPlE"!capitalize();
    field Boolean matches <= "apple"!matches(pattern = r".*pl.");

    field Boolean like <= "apple"!like(pattern = "%pl_");
    field Boolean likeFalse <= "apple"!like(pattern = "%qwe%");
    field Boolean likeOnUndefined <= self.undefined!like(pattern = "%qwe%");
    field Boolean ilike <= "apple"!ilike(pattern = "%pL_");
    field Boolean ilikeFalse <= "apple"!ilike(pattern = "%qWE%");
    field Boolean ilikeOnUndefined <= self.undefined!ilike(pattern = "%qWE%");

    field String replace <= "apple"!replace(oldstring = "le", newstring = "endix");
    field String trim <= " apple "!trim();
    field String ltrim <= " apple "!ltrim();
    field String rtrim <= " apple "!rtrim();

    field String lpad <= "apple"!lpad(size = 10);
    field Boolean lpadTrue <= "apple"!lpad(size = 10)!isDefined();
    field Boolean lpadFalse <= "apple"!lpad(size = 10)!isUndefined();
    field String lpad1 <= "apple"!lpad(size = 10, padstring = "*");
    field String lpad2 <= "apple"!lpad(size = 2);
    field String lpad3 <= "apple"!lpad(size = 2, padstring = "*");
    field String rpad <= "apple"!rpad(size = 10);
    field String rpad1 <= "apple"!rpad(size = 10, padstring = "*");
    field String rpad2 <= "apple"!rpad(size = 2);
    field String rpad3 <= "apple"!rpad(size = 2, padstring = "*");

    field String lpadUndefined <= self.undefined!lpad(size = 10);
    field Boolean lpadUndefinedFalse <= self.undefined!lpad(size = 10)!isDefined();
    field Boolean lpadUndefinedTrue <= self.undefined!lpad(size = 10)!isUndefined();
    field String lpadUndefined1 <= self.undefined!lpad(size = 10, padstring = "*");
    field String rpadUndefined <= self.undefined!rpad(size = 10);
    field String rpadUndefined1 <= self.undefined!rpad(size = 10, padstring = "*");

    field String parenthizedAsString <= (12 + 14)!asString();
}

entity NumericFunctions {
    field Integer int = 1;
    field Scaled neg = -2.5;
    field Scaled neg1 = -1.23;
    field Scaled neg2 = -7.89;
    field Scaled neg3 = -2.9;
    field Integer neg4 = -3;

    field Integer roundInt <= self.int!round();
    field Integer roundInt2 <= 1!round();
    field Integer roundScaled1 <= 1.23!round();
    field Integer roundScaled2 <= 7.89!round();
    field Integer roundScaled3 <= 2.50!round();
    field Integer roundScaledNegative1 <= self.neg!round();
    field Integer roundScaledNegative2 <= self.neg1!round();
    field Integer roundScaledNegative3 <= self.neg2!round();

    field Scaled roundIntScaled <= self.int!round(scale = 1);
    field Scaled roundInt2Scaled <= 1!round(scale = 1);
    field Scaled roundScaled1Scaled <= 1.23!round(scale = 1);
    field Scaled roundScaled2Scaled <= 7.89!round(scale = 1);
    field Scaled roundScaled3Scaled <= 2.50!round(scale = 1);
    field Scaled roundScaledNegative1Scaled <= self.neg!round(scale = 1);
    field Scaled roundScaledNegative2Scaled <= self.neg1!round(scale = 1);
    field Scaled roundScaledNegative3Scaled <= self.neg2!round(scale = 1);

    field Integer floorInt <= 1!floor();
    field Integer floorScaled1 <= 2.9!floor();
    field Integer floorScaled2 <= self.neg3!floor();

    field Integer ceilInt <= 1!ceil();
    field Integer ceilScaled1 <= 2.9!ceil();
    field Integer ceilScaled2 <= self.neg3!ceil();

    field Integer absInt <= 1!abs();
    field Integer absInt2 <= self.neg4!abs();
    field Scaled absScaled1 <= 2.9!abs();
    field Scaled absScaled2 <= self.neg3!abs();

    field String intAsString <= 1!asString();
    field String scaledAsString <= 123456.789!asString();
}


/*
|=============================================================================================
|`p`            |`q`            |`p or q`       |`p and q`      |`p xor q`      |`p implies q`
|`true`	        |`true`	        |`true` 	    |`true`	        |`false`        |`true`
|`true`	        |`false`	    |`true`         |`false`	    |`true`         |`false`
|`true`	        |`undefined`	|`true`	        |`undefined`	|`undefined`    |`undefined`
|`false`	    |`true`	        |`true`	        |`false`	    |`true`         |`true`
|`false`	    |`false`	    |`false`	    |`false`	    |`false`        |`true`
|`false`	    |`undefined`	|`undefined`	|`false`	    |`undefined`    |`true`
|`undefined`	|`true`	        |`true`	        |`undefined`	|`undefined`    |`true`
|`undefined`	|`false`	    |`undefined`	|`false`	    |`undefined`    |`undefined`
|`undefined`	|`undefined`	|`undefined`	|`undefined`	|`undefined`    |`undefined`
|=============================================================================================
 */
entity Kleene {
	field Boolean undefined;
	field Boolean bool = true;
	
	field Boolean trueOrTrue <= (true or true);
	field Boolean trueOrFalse <= (true or false);
	field Boolean trueOrUndefined <= (true or self.undefined);
	field Boolean falseOrTrue <= (false or true);
	field Boolean falseOrFalse <= (false or false);
	field Boolean falseOrUndefined <= (false or self.undefined);
	field Boolean undefinedOrTrue <= (self.undefined or true);
	field Boolean undefinedOrFalse <= (self.undefined or false);
	field Boolean undefinedOrUndefined <= (self.undefined or self.undefined);

	field Boolean trueAndTrue <= (true and true);
	field Boolean trueAndFalse <= (true and false);
	field Boolean trueAndUndefined <= (true and self.undefined);
	field Boolean falseAndTrue <= (false and true);
	field Boolean falseAndFalse <= (false and false);
	field Boolean falseAndUndefined <= (false and self.undefined);
	field Boolean undefinedAndTrue <= (self.undefined and true);
	field Boolean undefinedAndFalse <= (self.undefined and false);
	field Boolean undefinedAndUndefined <= (self.undefined and self.undefined);

	field Boolean trueXorTrue <= (true xor true);
	field Boolean trueXorFalse <= (true xor false);
	field Boolean trueXorUndefined <= (true xor self.undefined);
	field Boolean falseXorTrue <= (false xor true);
	field Boolean falseXorFalse <= (false xor false);
	field Boolean falseXorUndefined <= (false xor self.undefined);
	field Boolean undefinedXorTrue <= (self.undefined xor true);
	field Boolean undefinedXorFalse <= (self.undefined xor false);
	field Boolean undefinedXorUndefined <= (self.undefined xor self.undefined);

	field Boolean trueImpliesTrue <= (true implies true);
	field Boolean trueImpliesFalse <= (true implies false);
	field Boolean trueImpliesUndefined <= (true implies self.undefined);
	field Boolean falseImpliesTrue <= (false implies true);
	field Boolean falseImpliesFalse <= (false implies false);
	field Boolean falseImpliesUndefined <= (false implies self.undefined);
	field Boolean undefinedImpliesTrue <= (self.undefined implies true);
	field Boolean undefinedImpliesFalse <= (self.undefined implies false);
	field Boolean undefinedImpliesUndefined <= (self.undefined implies self.undefined);
}

entity BooleanFunctions {
    field Boolean bool = true;

    field String ownBoolAsString <= self.bool!asString();
    field String trueAsString <= true!asString();
    field String falseAsString <= false!asString();
    field String logicalExpressionAsString <= (true or true)!asString();
}

entity DateFunctions {
    field Date `date` = `2022-07-11`;
    field Date undefined;

    field String ownDateAsString <= self.`date`!asString();
    field String dateAsString <= `2021-03-02`!asString();
    field Integer year <= `2021-03-02`!year();
    field Integer month <= `2021-03-02`!month();
    field Integer day <= `2021-03-02`!day();
    field Date of <= Date!of(year = 2011, month = 1, day = 28);

    field Integer dayOfYear <= `2022-10-07`!dayOfYear();
    field Integer dayOfWeekMonday <= `2022-10-03`!dayOfWeek();
    field Integer dayOfWeekTuesday <= `2022-10-04`!dayOfWeek();
    field Integer dayOfWeekWednesday <= `2022-10-05`!dayOfWeek();
    field Integer dayOfWeekThursday <= `2022-10-06`!dayOfWeek();
    field Integer dayOfWeekFriday <= `2022-10-07`!dayOfWeek();
    field Integer dayOfWeekSaturday <= `2022-10-08`!dayOfWeek();
    field Integer dayOfWeekSunday <= `2022-10-09`!dayOfWeek();

    field Integer dayOfYearUndefined <= self.undefined!dayOfYear();
    field Integer dayOfWeekUndefined <= self.undefined!dayOfWeek();
}

entity TimeFunctions {
    field Time timeHM = `12:34`;
    field Time timeHM1 = Time!of(hour = 12, minute = 34);
    field Time timeHMS = `12:34:56`;
    field Time timeHMS1 = Time!of(hour = 12, minute = 34, second = 56);
    field Time timeHMSF = `12:34:56.789`;
    field Time timeHMSF1 = Time!of(hour = 12, minute = 34, second = 56, millisecond = 789);
    field Time timeHMSF2 = Time!of(hour = 12, minute = 34, millisecond = 789);

    field Time undefinedTime;
    field Integer undefinedNumber;
    field Integer number;

    // self
    field String selfTimeHMAsString <= self.timeHM!asString();
    field Integer selfTimeHMHour <= self.timeHM!hour();
    field Integer selfTimeHMMinute <= self.timeHM!minute();
    field Integer selfTimeHMSecond <= self.timeHM!second();
    field Integer selfTimeHMMillisecond <= self.timeHM!millisecond();
    field Integer selfTimeHMAsMillisecond <= self.timeHM!asMilliseconds();

    field String selfTimeHMSAsString <= self.timeHMS!asString();
    field Integer selfTimeHMSHour <= self.timeHMS!hour();
    field Integer selfTimeHMSMinute <= self.timeHMS!minute();
    field Integer selfTimeHMSSecond <= self.timeHMS!second();
    field Integer selfTimeHMSMillisecond <= self.timeHMS!millisecond();
    field Integer selfTimeHMSAsMillisecond <= self.timeHMS!asMilliseconds();

    field String selfTimeHMSFAsString <= self.timeHMSF!asString();
    field Integer selfTimeHMSFHour <= self.timeHMSF!hour();
    field Integer selfTimeHMSFMinute <= self.timeHMSF!minute();
    field Integer selfTimeHMSFSecond <= self.timeHMSF!second();
    field Integer selfTimeHMSFMillisecond <= self.timeHMSF!millisecond();
    field Integer selfTimeHMSFAsMillisecond <= self.timeHMSF!asMilliseconds();

    // undefined
    field String selfUndefinedTimeAsString <= self.undefinedTime!asString();
    field Integer selfUndefinedTimeHour <= self.undefinedTime!hour();
    field Integer selfUndefinedTimeMinute <= self.undefinedTime!minute();
    field Integer selfUndefinedTimeSecond <= self.undefinedTime!second();
    field Integer selfUndefinedTimeMillisecond <= self.undefinedTime!millisecond();
    field Integer selfUndefinedTimeAsMillisecond <= self.undefinedTime!asMilliseconds();

    // constant
    field String timeConstantHMAsString <= `12:34`!asString();
    field Integer timeConstantHMHour <= `12:34`!hour();
    field Integer timeConstantHMMinute <= `12:34`!minute();
    field Integer timeConstantHMSecond <= `12:34`!second();
    field Integer timeConstantHMMillisecond <= `12:34`!millisecond();
    field Integer timeConstantHMAsMillisecond <= `12:34`!asMilliseconds();
    
    field String timeConstantHMSAsString <= `12:34:56`!asString();
    field Integer timeConstantHMSHour <= `12:34:56`!hour();
    field Integer timeConstantHMSMinute <= `12:34:56`!minute();
    field Integer timeConstantHMSSecond <= `12:34:56`!second();
    field Integer timeConstantHMSMillisecond <= `12:34:56`!millisecond();
    field Integer timeConstantHMSAsMillisecond <= `12:34:56`!asMilliseconds();
    
    field String timeConstantHMSFAsString <= `12:34:56.789`!asString();
    field Integer timeConstantHMSFHour <= `12:34:56.789`!hour();
    field Integer timeConstantHMSFMinute <= `12:34:56.789`!minute();
    field Integer timeConstantHMSFSecond <= `12:34:56.789`!second();
    field Integer timeConstantHMSFMillisecond <= `12:34:56.789`!millisecond();
    field Integer timeConstantHMSFAsMillisecond <= `12:34:56.789`!asMilliseconds();

    // from millisecond
    field Time timeFromMillisecondOfUndefined <= Time!fromMilliseconds(milliseconds = self.undefinedNumber);
    field Time timeFromMillisecondOfSelfNumber <= Time!fromMilliseconds(milliseconds = self.number);
    field Time timeFromMillisecondOfConstant <= Time!fromMilliseconds(milliseconds = 999999);

}

entity TimestampFunctions {
    field Timestamp timestamp1 = `2019-07-18T01:11:12+02:00`;
    field Timestamp timestamp2 = `2019-07-18T01:11:12Z`;

    field Timestamp timestampOfDate <= Timestamp!of(date = `2022-09-29`);
    field Timestamp timestampOfDateAndTime <= Timestamp!of(date = `2022-09-29`, time = `11:11:11`);

    field Date dateOfTimestampWithDate <= Timestamp!of(date = `2022-09-29`)!date();
    field Date dateOfTimestampWithDateAndTime <= Timestamp!of(date = `2022-09-29`, time = `11:11:11`)!date();
    field Date dateOfTimestampSelf <= self.timestamp2!date();
    field Time timeOfTimestampWithDate <= Timestamp!of(date = `2022-09-29`)!time();
    field Time timeOfTimestampWithDateAndTime <= Timestamp!of(date = `2022-09-29`, time =`11:11:11`)!time();
    field Time timeOfTimestampSelf <= self.timestamp2!time();

    field Integer asMilliseconds <= Timestamp!of(date = `2022-09-29`)!asMilliseconds();
    field Integer asMilliseconds2 <= Timestamp!of(date = `2022-09-29`, time = `11:11:11`)!asMilliseconds();

    field Timestamp fromMilliseconds <= Timestamp!fromMilliseconds(milliseconds = 1664449871000);

    field Timestamp plusAll <= Timestamp!of(date = `2022-09-29`, time = `11:11:11`)!plus(years = 1, months = 1, days = 1, hours = 1, minutes = 1, seconds = 1, milliseconds = 1);
    field Timestamp plusDate <= Timestamp!of(date = `2022-09-29`, time = `11:11:11`)!plus(years = 1, months = 1, days = 1);

    field Timestamp plusAllReversed <= Timestamp!of(date = `2022-09-29`, time = `11:11:11`)!plus(milliseconds = 1, seconds = 1, hours = 1, days = 1, months = 1, minutes = 1, years = 1);
    field Timestamp plusDateReversed <= Timestamp!of(date = `2022-09-29`, time = `11:11:11`)!plus(days = 1, months = 1, years = 1);

    field Timestamp plusMilliseconds <= Timestamp!of(date = `2022-09-29`, time = `11:11:11`)!plus(milliseconds = 1);

    field Timestamp minusAll <= Timestamp!of(date = `2022-09-29`, time = `11:11:11`)!plus(years = -1, months = -1, days = -1, hours = -1, minutes = -1, seconds = -1, milliseconds = -1);
    field Timestamp minusDate <= Timestamp!of(date = `2022-09-29`, time = `11:11:11`)!plus(years = -1, months = -1, days = -1);

    field Timestamp minusAllReversed <= Timestamp!of(date = `2022-09-29`, time = `11:11:11`)!plus(milliseconds = -1, seconds = -1, hours = -1, days = -1, months = -1, minutes = -1, years = -1);
    field Timestamp minusDateReversed <= Timestamp!of(date = `2022-09-29`, time = `11:11:11`)!plus(days = -1, months = -1, years = -1);

    field Timestamp minusMilliseconds <= Timestamp!of(date = `2022-09-29`, time = `11:11:11`)!plus(milliseconds = -1);
}

entity TimestampAsString {
    field Timestamp timestamp1 = `2022-03-03T14:00:00Z`;
    field Timestamp timestamp2 = `2022-03-03T14:00:00.123Z`;
    field Timestamp timestamp3 = `2022-03-03T14:00:00+00:03`;
    field Timestamp timestamp4 = `2022-03-03T14:00:00+03:00`;
    field Timestamp timestamp5 = `2022-03-03T14:00:00+03:03`;
    field Timestamp timestamp6 = `2022-03-03T14:00:00-00:03`;
    field Timestamp timestamp7 = `2022-03-03T14:00:00-03:00`;
    field Timestamp timestamp8 = `2022-03-03T14:00:00-03:03`;
    field Timestamp timestamp9 = `2022-03-03T14:00:00.123+00:03`;
    field Timestamp timestamp10 = `2022-03-03T14:00:00.123+03:00`;
    field Timestamp timestamp12 = `2022-03-03T14:00:00.123+03:03`;
    field Timestamp timestamp13 = `2022-03-03T14:00:00.123-00:03`;
    field Timestamp timestamp14 = `2022-03-03T14:00:00.123-03:00`;
    field Timestamp timestamp15 = `2022-03-03T14:00:00.123-03:03`;

    field String timestamp1AsString <= `2022-03-03T14:00:00Z`!asString();
    field String timestamp1AsString1 <= self.timestamp1!asString();
    field String timestamp2AsString <= `2022-03-03T14:00:00.123Z`!asString();
    field String timestamp2AsString1 <= self.timestamp2!asString();
    field String timestamp3AsString <= `2022-03-03T14:00:00+00:03`!asString();
    field String timestamp3AsString1 <= self.timestamp3!asString();
    field String timestamp4AsString <= `2022-03-03T14:00:00+03:00`!asString();
    field String timestamp4AsString1 <= self.timestamp4!asString();
    field String timestamp5AsString <= `2022-03-03T14:00:00+03:03`!asString();
    field String timestamp5AsString1 <= self.timestamp5!asString();
    field String timestamp6AsString <= `2022-03-03T14:00:00-00:03`!asString();
    field String timestamp6AsString1 <= self.timestamp6!asString();
    field String timestamp7AsString <= `2022-03-03T14:00:00-03:00`!asString();
    field String timestamp7AsString1 <= self.timestamp7!asString();
    field String timestamp8AsString <= `2022-03-03T14:00:00-03:03`!asString();
    field String timestamp8AsString1 <= self.timestamp8!asString();
    field String timestamp9AsString <= `2022-03-03T14:00:00.123+00:03`!asString();
    field String timestamp9AsString1 <= self.timestamp9!asString();
    field String timestamp10AsString <= `2022-03-03T14:00:00.123+03:00`!asString();
    field String timestamp10AsString1 <= self.timestamp10!asString();
    field String timestamp12AsString <= `2022-03-03T14:00:00.123+03:03`!asString();
    field String timestamp12AsString1 <= self.timestamp12!asString();
    field String timestamp13AsString <= `2022-03-03T14:00:00.123-00:03`!asString();
    field String timestamp13AsString1 <= self.timestamp13!asString();
    field String timestamp14AsString <= `2022-03-03T14:00:00.123-03:00`!asString();
    field String timestamp14AsString1 <= self.timestamp14!asString();
    field String timestamp15AsString <= `2022-03-03T14:00:00.123-03:03`!asString();
    field String timestamp15AsString1 <= self.timestamp15!asString();

    field Timestamp timestampOfDate = Timestamp!of(date = `2022-09-29`);
    field String timestampOfDateAsString <= Timestamp!of(date = `2022-09-29`)!asString();
    field String timestampOfDateAsString1 <= self.timestampOfDate!asString();

    field Timestamp timestampOfDateAndTime = Timestamp!of(date = `2022-09-29`, time = `11:11:11`);
    field String timestampOfDateAndTimeAsString <= Timestamp!of(date = `2022-09-29`, time = `11:11:11`)!asString();
    field String timestampOfDateAndTimeAsString1 <= self.timestampOfDateAndTime!asString();

    field Timestamp fromMilliseconds = Timestamp!fromMilliseconds(milliseconds = 1664449871000);
    field String fromMillisecondsAsString <= Timestamp!fromMilliseconds(milliseconds = 1664449871000)!asString();
    field String fromMillisecondsAsString1 <= self.fromMilliseconds!asString();
}

entity EnumFunctions {
    field MyEnum `enum` = MyEnum#Atomic;

    field String ownEnumAsString <= self.`enum`!asString();
    field String enumAsString <= (MyEnum#Atomic)!asString();
}

entity InstanceFunctions {
    field String instanceField = "Hello";
    field FE::ExternalEntity external;
    field Parent parent;
    field Child child;

    relation Parent[] parents;
    relation Child[] children;

    field Boolean typeOfParent <= self.parent!typeOf(entityType = Parent);
    field Boolean notTypeOfChild <= self.parent!typeOf(entityType = Child);

    field Boolean kindOfParent <= self.parent!kindOf(entityType = Parent);
    field Boolean kindOfChild <= self.parent!kindOf(entityType = Child);

    relation Parent asParentType <= self.child;
    relation Child asChildType <= self.parent!asType(entityType = Child);

    field Boolean parentMemberOfParents <= self.parent!memberOf(instances = self.parents);
    field Boolean parentMemberOfParentsExtra <= self.parent!memberOf(instances = self.parents!filter(p | p!memberOf(instances = Parent!all())));
    field Boolean parentMemberOfChildren <= self.parent!memberOf(instances = self.children);
    field Boolean childMemberOfParents <= self.child!memberOf(instances = self.parents);
    field Boolean childMemberOfChildren <= self.child!memberOf(instances = self.children);

	field Integer navigationWithCalls <= self.parents!any().name!size();
}

entity Booler {
    field Boolean b;
}

entity BoolerTester {
    field Boolean anyTrue <= Booler!all()!anyTrue(b | b.b);
    field Boolean allTrue <= Booler!all()!allTrue(b | b.b);
    field Boolean anyFalse <= Booler!all()!anyFalse(b | b.b);
    field Boolean allFalse <= Booler!all()!allFalse(b | b.b);
}

entity CollectionFunctions {
    field Parent[] parentsField;
    field Child[] childrenField;

    relation Parent[] parentsRelation;
    relation Child[] childrenRelation;

    relation Parent anyParentsField <= self.parentsField!any();
    relation Parent anyParentsRelation <= self.parentsRelation!any();

    field Integer sizeParentsField <= self.parentsField!size();
    field Integer sizeParentsRelation <= self.parentsRelation!size();

    relation Parent[] asCollectionChildrenParentField <= self.parentsField!asCollection(entityType = Parent);
    relation Parent[] asCollectionChildrenParentRelation <= self.parentsRelation!asCollection(entityType = Parent);
    relation Child[] asCollectionChildrenChildField <= self.parentsField!asCollection(entityType = Child);
    relation Child[] asCollectionChildrenChildRelation <= self.parentsRelation!asCollection(entityType = Child);

    field Boolean containsParent <= self.parentsField!contains(instance = Parent!all()!filter(p | p.name == "John")!any());

    relation Parent[] filterParentsField <= self.parentsField!filter(p | p.name == "John");
    relation Parent[] filterParentsRelation <= self.parentsRelation!filter(p | p.name == "Mark");
    relation Child[] filterChildrenField <= self.childrenField!filter(p | p.name == "Cindy");
    relation Child[] filterChildrenRelation <= self.childrenRelation!filter(p | p.name == "Anna");

    field Boolean anyTrueChildrenField <= self.childrenField!anyTrue(p | p.age  > 40);
    field Boolean anyTrueChildrenRelation <= self.childrenRelation!anyTrue(p | p.age  > 40);

    field Boolean allTrueChildrenField <= self.childrenField!allTrue(p | p.age  > 16);
    field Boolean allTrueChildrenRelation <= self.childrenRelation!allTrue(p | p.age  > 16);

    field Boolean anyFalseChildrenField <= self.childrenField!anyFalse(p | p.age  > 16);
    field Boolean anyFalseChildrenRelation <= self.childrenRelation!anyFalse(p | p.age  > 16);

    field Boolean allFalseChildrenField <= self.childrenField!allFalse(p | p.age  > 16);
    field Boolean allFalseChildrenRelation <= self.childrenRelation!allFalse(p | p.age  < 2);

    field Integer minChildrenField <= self.childrenField!min(f | f.age);
    field Integer minChildrenRelation <= self.childrenRelation!min(f | f.age);

    field Integer maxChildrenField <= self.childrenField!max(f | f.age);
    field Integer maxChildrenRelation <= self.childrenRelation!max(f | f.age);

    field Integer sumChildrenField <= self.childrenField!sum(f | f.age);
    field Integer sumChildrenRelation <= self.childrenRelation!sum(f | f.age);

    field Integer avgChildrenField <= self.childrenField!avg(f | f.age);
    field Integer avgChildrenRelation <= self.childrenRelation!avg(f | f.age);
    field Scaled avgScaledChildrenField <= self.childrenField!avg(f | f.age);
    field Scaled avgScaledChildrenRelation <= self.childrenRelation!avg(f | f.age);
    field Integer divisionConst <= 69 / 2;
    field Integer roundConst <= (69 / 2)!round();

    relation Child[] firstChildrenField <= self.childrenField!first(f | f.age);
    relation Child[] firstChildrenRelation <= self.childrenRelation!first(f | f.age);

    relation Child[] lastChildrenField <= self.childrenField!last(f | f.age);
    relation Child[] lastChildrenRelation <= self.childrenRelation!last(f | f.age);

    relation Child[] frontChildrenField <= self.childrenField!front(f | f.age);
    relation Child[] frontChildrenRelation <= self.childrenRelation!front(f | f.age);

    relation Child[] backChildrenField <= self.childrenField!back(f | f.age);
    relation Child[] backChildrenRelation <= self.childrenRelation!back(f | f.age);

}

entity Parent {
    field String name;
}

entity Child extends Parent {
    field Integer age;
    relation Parent mother;
}

entity ExternalChild extends FE::ExternalEntity {
    field Integer age;
}

entity Member {
    field String name;
}

entity Tester {
    relation Member member;
    relation Member[] members;

    field Boolean memberMemberOfMembers <= self.member!memberOf(instances = self.members);
}
