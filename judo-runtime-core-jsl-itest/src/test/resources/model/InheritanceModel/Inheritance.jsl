model Inheritance;

import judo::types;

type numeric Scaled precision:9 scale:2;
type string PhoneNumber min-size:0 max-size:32 regex:"^(\\+\\d{1,2}\\s)?\\(?\\d{2,3}\\)?[\\s.-]\\d{3}[\\s.-]\\d{4}$";
type string SmallString min-size:0 max-size:128;

enum MyEnum {
    Atomic = 0;
    Bombastic = 1;
    Crazy = 2;
}

entity ParentA {
    field String nameA;
    identifier String identifierA;
    field String derivedA <= self.nameA;
    relation RelationEntity[] relationEntities;
    @Lazy
    field String queryA(String param) <= param;
}

entity ParentB {
    field String nameB;
}

entity ParentRequiredC {
    field required Integer integerAttr;
    field required Scaled scaledAttr;
    field required String stringAttr;
    field required PhoneNumber regexAttr;
    field required Boolean boolAttr;
    field required Date dateAttr;
    field required Timestamp timestampAttr;
    field required Time timeAttr;
    field required MyEnum enumAttr;
}

entity ParentDefaultD {
    field Integer integerAttr = 1;
    field Scaled scaledAttr = 2.34;
    field String stringAttr = "test";
    field PhoneNumber regexAttr = "+36 (30) 123 1234";
    field Boolean boolAttr = true;
    field Date dateAttr = `2022-07-11`;
    field Timestamp timestampAttr = `2022-07-11T19:09:33Z`;
    field Time timeAttr = `23:59:59`;
    field Time shortTimeAttr = `23:59`;
    field MyEnum enumAttr = MyEnum#Bombastic;
}

entity abstract ParentAbstract {
    field String nameAbstract;
}

entity RelationEntity {
	field Integer number = 1 ;
}

entity E extends ParentA {
    field String nameE;
}

entity F extends ParentA,ParentB,ParentAbstract {
}

entity G extends E,ParentB {
}

entity H extends ParentRequiredC {
}

entity I extends ParentDefaultD {

}
