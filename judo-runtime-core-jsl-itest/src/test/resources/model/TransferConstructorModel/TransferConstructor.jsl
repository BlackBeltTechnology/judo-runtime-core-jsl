model TransferConstructor;

import judo::types;

type numeric Scaled precision:9 scale:2;
type string PhoneNumber min-size:0 max-size:32 regex:"^(\\+\\d{1,2}\\s)?\\(?\\d{2,3}\\)?[\\s.-]\\d{3}[\\s.-]\\d{4}$";
type binary Binary mime-type:["text/plain"] max-file-size:1 GB;
type string SmallString min-size:0 max-size:128;

enum Enum {
    EnumA = 0;
    EnumB = 1;
    EnumC = 2;
}

////////////////////////////////////////////////////////////////////////////////////////
// Entity with optional fields                                                        //
////////////////////////////////////////////////////////////////////////////////////////

entity EntityWithOptionalFields {
        field Integer integerAttr;
        field Scaled scaledAttr;
        field SmallString stringAttr;
        field PhoneNumber regexAttr;
        field Boolean boolAttr;
        field Date dateAttr;
        field Timestamp timestampAttr;
        field Time timeAttr;
        field Enum enumAttr;
}

// Mapped Transfer Object with optional fields
transfer TransferWithOptionalFieldsMapsEntityWithOptionalFields (EntityWithOptionalFields mappedEntity) {
    field Integer integerAttr <=> mappedEntity.integerAttr;
    field Scaled scaledAttr <=> mappedEntity.scaledAttr;
    field SmallString stringAttr <=> mappedEntity.stringAttr;
    field PhoneNumber regexAttr <=> mappedEntity.regexAttr;
    field Boolean boolAttr <=> mappedEntity.boolAttr;
    field Date dateAttr <=> mappedEntity.dateAttr;
    field Timestamp timestampAttr <=> mappedEntity.timestampAttr;
    field Time timeAttr <=> mappedEntity.timeAttr;
    field Enum enumAttr <=> mappedEntity.enumAttr;

}

// Mapped Transfer Object with optional fields with default
transfer TransferWithOptionalFieldsWithDefaultMapsEntityWithOptionalFields (EntityWithOptionalFields mappedEntity) {
    field Integer integerAttr <=> mappedEntity.integerAttr;
    field Scaled scaledAttr <=> mappedEntity.scaledAttr;
    field SmallString stringAttr <=> mappedEntity.stringAttr;
    field PhoneNumber regexAttr <=> mappedEntity.regexAttr;
    field Boolean boolAttr <=> mappedEntity.boolAttr;
    field Date dateAttr <=> mappedEntity.dateAttr;
    field Timestamp timestampAttr <=> mappedEntity.timestampAttr;
    field Time timeAttr <=> mappedEntity.timeAttr;
    field Enum enumAttr <=> mappedEntity.enumAttr;

    constructor {
        self.integerAttr = 1;
        self.scaledAttr = 2.34;
        self.stringAttr = "Hello there";
        self.regexAttr = "+36 (30) 123 1234";
        self.boolAttr = true;
        self.dateAttr = `2022-07-11`;
        self.timestampAttr = `2022-07-11T19:09:33Z`;
        self.timeAttr  = `23:59:59`;
        self.enumAttr = Enum#EnumA;
    }
}

// Mapped Transfer Object with required fields
transfer TransferWithRequiredFieldsMapsEntityWithOptionalFields (EntityWithOptionalFields mappedEntity) {
    field required Integer integerAttr <=> mappedEntity.integerAttr;
    field required Scaled scaledAttr <=> mappedEntity.scaledAttr;
    field required SmallString stringAttr <=> mappedEntity.stringAttr;
    field required PhoneNumber regexAttr <=> mappedEntity.regexAttr;
    field required Boolean boolAttr <=> mappedEntity.boolAttr;
    field required Date dateAttr <=> mappedEntity.dateAttr;
    field required Timestamp timestampAttr <=> mappedEntity.timestampAttr;
    field required Time timeAttr <=> mappedEntity.timeAttr;
    field required Enum enumAttr <=> mappedEntity.enumAttr;

}

// Mapped Transfer Object with required fields with default
transfer TransferWithRequiredFieldsWithDefaultMapsEntityWithOptionalFields (EntityWithOptionalFields mappedEntity) {
    field required Integer integerAttr <=> mappedEntity.integerAttr;
    field required Scaled scaledAttr <=> mappedEntity.scaledAttr;
    field required SmallString stringAttr <=> mappedEntity.stringAttr;
    field required PhoneNumber regexAttr <=> mappedEntity.regexAttr;
    field required Boolean boolAttr <=> mappedEntity.boolAttr;
    field required Date dateAttr <=> mappedEntity.dateAttr;
    field required Timestamp timestampAttr <=> mappedEntity.timestampAttr;
    field required Time timeAttr <=> mappedEntity.timeAttr;
    field required Enum enumAttr <=> mappedEntity.enumAttr;

    constructor {
        self.integerAttr = 1;
        self.scaledAttr = 2.34;
        self.stringAttr = "Hello there";
        self.regexAttr = "+36 (30) 123 1234";
        self.boolAttr = true;
        self.dateAttr = `2022-07-11`;
        self.timestampAttr = `2022-07-11T19:09:33Z`;
        self.timeAttr  = `23:59:59`;
        self.enumAttr = Enum#EnumA;
    }
}

////////////////////////////////////////////////////////////////////////////////////////
// Entity with required fields                                                        //
////////////////////////////////////////////////////////////////////////////////////////

entity EntityWithRequiredFields {
        field required Integer integerAttr;
        field required Scaled scaledAttr;
        field required SmallString stringAttr;
        field required PhoneNumber regexAttr;
        field required Boolean boolAttr;
        field required Date dateAttr;
        field required Timestamp timestampAttr;
        field required Time timeAttr;
        field required Enum enumAttr;
}


// Mapped Transfer Object with optional fields
transfer TransferWithOptionalFieldsMapsEntityWithRequiredFields (EntityWithRequiredFields mappedEntity) {
    field Integer integerAttr <=> mappedEntity.integerAttr;
    field Scaled scaledAttr <=> mappedEntity.scaledAttr;
    field SmallString stringAttr <=> mappedEntity.stringAttr;
    field PhoneNumber regexAttr <=> mappedEntity.regexAttr;
    field Boolean boolAttr <=> mappedEntity.boolAttr;
    field Date dateAttr <=> mappedEntity.dateAttr;
    field Timestamp timestampAttr <=> mappedEntity.timestampAttr;
    field Time timeAttr <=> mappedEntity.timeAttr;
    field Enum enumAttr <=> mappedEntity.enumAttr;

}

// Mapped Transfer Object with optional fields with default
transfer TransferWithOptionalFieldsWithDefaultMapsEntityWithRequiredFields (EntityWithRequiredFields mappedEntity) {
    field Integer integerAttr <=> mappedEntity.integerAttr;
    field Scaled scaledAttr <=> mappedEntity.scaledAttr;
    field SmallString stringAttr <=> mappedEntity.stringAttr;
    field PhoneNumber regexAttr <=> mappedEntity.regexAttr;
    field Boolean boolAttr <=> mappedEntity.boolAttr;
    field Date dateAttr <=> mappedEntity.dateAttr;
    field Timestamp timestampAttr <=> mappedEntity.timestampAttr;
    field Time timeAttr <=> mappedEntity.timeAttr;
    field Enum enumAttr <=> mappedEntity.enumAttr;

    constructor {
        self.integerAttr = 1;
        self.scaledAttr = 2.34;
        self.stringAttr = "Hello there";
        self.regexAttr = "+36 (30) 123 1234";
        self.boolAttr = true;
        self.dateAttr = `2022-07-11`;
        self.timestampAttr = `2022-07-11T19:09:33Z`;
        self.timeAttr  = `23:59:59`;
        self.enumAttr = Enum#EnumA;
    }
}

// Mapped Transfer Object with required fields
transfer TransferWithRequiredFieldsMapsEntityWithRequiredFields (EntityWithRequiredFields mappedEntity) {
    field required Integer integerAttr <=> mappedEntity.integerAttr;
    field required Scaled scaledAttr <=> mappedEntity.scaledAttr;
    field required SmallString stringAttr <=> mappedEntity.stringAttr;
    field required PhoneNumber regexAttr <=> mappedEntity.regexAttr;
    field required Boolean boolAttr <=> mappedEntity.boolAttr;
    field required Date dateAttr <=> mappedEntity.dateAttr;
    field required Timestamp timestampAttr <=> mappedEntity.timestampAttr;
    field required Time timeAttr <=> mappedEntity.timeAttr;
    field required Enum enumAttr <=> mappedEntity.enumAttr;

}

// Mapped Transfer Object with required fields with default
transfer TransferWithRequiredFieldsWithDefaultMapsEntityWithRequiredFields (EntityWithRequiredFields mappedEntity) {
    field required Integer integerAttr <=> mappedEntity.integerAttr;
    field required Scaled scaledAttr <=> mappedEntity.scaledAttr;
    field required SmallString stringAttr <=> mappedEntity.stringAttr;
    field required PhoneNumber regexAttr <=> mappedEntity.regexAttr;
    field required Boolean boolAttr <=> mappedEntity.boolAttr;
    field required Date dateAttr <=> mappedEntity.dateAttr;
    field required Timestamp timestampAttr <=> mappedEntity.timestampAttr;
    field required Time timeAttr <=> mappedEntity.timeAttr;
    field required Enum enumAttr <=> mappedEntity.enumAttr;

    constructor {
        self.integerAttr = 1;
        self.scaledAttr = 2.34;
        self.stringAttr = "Hello there";
        self.regexAttr = "+36 (30) 123 1234";
        self.boolAttr = true;
        self.dateAttr = `2022-07-11`;
        self.timestampAttr = `2022-07-11T19:09:33Z`;
        self.timeAttr  = `23:59:59`;
        self.enumAttr = Enum#EnumA;
    }
}

////////////////////////////////////////////////////////////////////////////////////////
// Entity with optional fields with default value                                     //
////////////////////////////////////////////////////////////////////////////////////////

entity EntityWithOptionalFieldsWithDefault {
    field Integer integerAttr = 1;
    field Scaled scaledAttr = 2.34;
    field String stringAttr = "Hello there";
    field PhoneNumber regexAttr = "+36-1-223-123";
    field Boolean boolAttr = true;
    field Date dateAttr = `2021-07-11`;
    field Timestamp timestampAttr = `2021-07-11T19:09:33Z`;
    field Time timeAttr = `23:59:59`;
    field Enum enumAttr = Enum#EnumA;
}


// Mapped Transfer Object with optional fields
transfer TransferWithOptionalFieldsMapsEntityWithOptionalFieldsWithDefault (EntityWithOptionalFieldsWithDefault mappedEntity) {
    field Integer integerAttr <=> mappedEntity.integerAttr;
    field Scaled scaledAttr <=> mappedEntity.scaledAttr;
    field SmallString stringAttr <=> mappedEntity.stringAttr;
    field PhoneNumber regexAttr <=> mappedEntity.regexAttr;
    field Boolean boolAttr <=> mappedEntity.boolAttr;
    field Date dateAttr <=> mappedEntity.dateAttr;
    field Timestamp timestampAttr <=> mappedEntity.timestampAttr;
    field Time timeAttr <=> mappedEntity.timeAttr;
    field Enum enumAttr <=> mappedEntity.enumAttr;

}

// Mapped Transfer Object with optional fields with default
transfer TransferWithOptionalFieldsWithDefaultMapsEntityWithOptionalFieldsWithDefault (EntityWithOptionalFieldsWithDefault mappedEntity) {
    field Integer integerAttr <=> mappedEntity.integerAttr;
    field Scaled scaledAttr <=> mappedEntity.scaledAttr;
    field SmallString stringAttr <=> mappedEntity.stringAttr;
    field PhoneNumber regexAttr <=> mappedEntity.regexAttr;
    field Boolean boolAttr <=> mappedEntity.boolAttr;
    field Date dateAttr <=> mappedEntity.dateAttr;
    field Timestamp timestampAttr <=> mappedEntity.timestampAttr;
    field Time timeAttr <=> mappedEntity.timeAttr;
    field Enum enumAttr <=> mappedEntity.enumAttr;

    constructor {
        self.integerAttr = 2;
        self.scaledAttr = 3.34;
        self.stringAttr = "Lorem Ipsum";
        self.regexAttr = "+36 (30) 123 5678";
        self.boolAttr = false;
        self.dateAttr = `2022-07-12`;
        self.timestampAttr = `2022-07-12T19:09:33Z`;
        self.timeAttr  = `23:59:58`;
        self.enumAttr = Enum#EnumB;
    }
}

// Mapped Transfer Object with required fields
transfer TransferWithRequiredFieldsMapsEntityWithOptionalFieldsWithDefault (EntityWithOptionalFieldsWithDefault mappedEntity) {
    field required Integer integerAttr <=> mappedEntity.integerAttr;
    field required Scaled scaledAttr <=> mappedEntity.scaledAttr;
    field required SmallString stringAttr <=> mappedEntity.stringAttr;
    field required PhoneNumber regexAttr <=> mappedEntity.regexAttr;
    field required Boolean boolAttr <=> mappedEntity.boolAttr;
    field required Date dateAttr <=> mappedEntity.dateAttr;
    field required Timestamp timestampAttr <=> mappedEntity.timestampAttr;
    field required Time timeAttr <=> mappedEntity.timeAttr;
    field required Enum enumAttr <=> mappedEntity.enumAttr;

}

// Mapped Transfer Object with required fields with default
transfer TransferWithRequiredFieldsWithDefaultMapsEntityWithOptionalFieldsWithDefault (EntityWithOptionalFieldsWithDefault mappedEntity) {
    field required Integer integerAttr <=> mappedEntity.integerAttr;
    field required Scaled scaledAttr <=> mappedEntity.scaledAttr;
    field required SmallString stringAttr <=> mappedEntity.stringAttr;
    field required PhoneNumber regexAttr <=> mappedEntity.regexAttr;
    field required Boolean boolAttr <=> mappedEntity.boolAttr;
    field required Date dateAttr <=> mappedEntity.dateAttr;
    field required Timestamp timestampAttr <=> mappedEntity.timestampAttr;
    field required Time timeAttr <=> mappedEntity.timeAttr;
    field required Enum enumAttr <=> mappedEntity.enumAttr;

    constructor {
        self.integerAttr = 2;
        self.scaledAttr = 3.34;
        self.stringAttr = "Lorem Ipsum";
        self.regexAttr = "+36 (30) 123 5678";
        self.boolAttr = false;
        self.dateAttr = `2022-07-12`;
        self.timestampAttr = `2022-07-12T19:09:33Z`;
        self.timeAttr  = `23:59:58`;
        self.enumAttr = Enum#EnumB;
    }
}

////////////////////////////////////////////////////////////////////////////////////////
// Entity with required fields with default value                                     //
////////////////////////////////////////////////////////////////////////////////////////

entity EntityWithRequiredFieldsWithDefault {
    field Integer integerAttr = 1;
    field Scaled scaledAttr = 2.34;
    field String stringAttr = "Hello there";
    field PhoneNumber regexAttr = "+36-1-223-123";
    field Boolean boolAttr = true;
    field Date dateAttr = `2021-07-11`;
    field Timestamp timestampAttr = `2021-07-11T19:09:33Z`;
    field Time timeAttr = `23:59:59`;
    field Enum enumAttr = Enum#EnumA;
}


// Mapped Transfer Object with optional fields
transfer TransferWithOptionalFieldsMapsEntityWithRequiredFieldsWithDefault (EntityWithRequiredFieldsWithDefault mappedEntity) {
    field Integer integerAttr <=> mappedEntity.integerAttr;
    field Scaled scaledAttr <=> mappedEntity.scaledAttr;
    field SmallString stringAttr <=> mappedEntity.stringAttr;
    field PhoneNumber regexAttr <=> mappedEntity.regexAttr;
    field Boolean boolAttr <=> mappedEntity.boolAttr;
    field Date dateAttr <=> mappedEntity.dateAttr;
    field Timestamp timestampAttr <=> mappedEntity.timestampAttr;
    field Time timeAttr <=> mappedEntity.timeAttr;
    field Enum enumAttr <=> mappedEntity.enumAttr;

}

// Mapped Transfer Object with optional fields with default
transfer TransferWithOptionalFieldsWithDefaultMapsEntityWithRequiredFieldsWithDefault (EntityWithRequiredFieldsWithDefault mappedEntity) {
    field Integer integerAttr <=> mappedEntity.integerAttr;
    field Scaled scaledAttr <=> mappedEntity.scaledAttr;
    field SmallString stringAttr <=> mappedEntity.stringAttr;
    field PhoneNumber regexAttr <=> mappedEntity.regexAttr;
    field Boolean boolAttr <=> mappedEntity.boolAttr;
    field Date dateAttr <=> mappedEntity.dateAttr;
    field Timestamp timestampAttr <=> mappedEntity.timestampAttr;
    field Time timeAttr <=> mappedEntity.timeAttr;
    field Enum enumAttr <=> mappedEntity.enumAttr;

    constructor {
        self.integerAttr = 2;
        self.scaledAttr = 3.34;
        self.stringAttr = "Lorem Ipsum";
        self.regexAttr = "+36 (30) 123 5678";
        self.boolAttr = false;
        self.dateAttr = `2022-07-12`;
        self.timestampAttr = `2022-07-12T19:09:33Z`;
        self.timeAttr  = `23:59:58`;
        self.enumAttr = Enum#EnumB;
    }
}

// Mapped Transfer Object with required fields
transfer TransferWithRequiredFieldsMapsEntityWithRequiredFieldsWithDefault (EntityWithRequiredFieldsWithDefault mappedEntity) {
    field required Integer integerAttr <=> mappedEntity.integerAttr;
    field required Scaled scaledAttr <=> mappedEntity.scaledAttr;
    field required SmallString stringAttr <=> mappedEntity.stringAttr;
    field required PhoneNumber regexAttr <=> mappedEntity.regexAttr;
    field required Boolean boolAttr <=> mappedEntity.boolAttr;
    field required Date dateAttr <=> mappedEntity.dateAttr;
    field required Timestamp timestampAttr <=> mappedEntity.timestampAttr;
    field required Time timeAttr <=> mappedEntity.timeAttr;
    field required Enum enumAttr <=> mappedEntity.enumAttr;

}

// Mapped Transfer Object with required fields with default
transfer TransferWithRequiredFieldsWithDefaultMapsEntityWithRequiredFieldsWithDefault (EntityWithRequiredFieldsWithDefault mappedEntity) {
    field required Integer integerAttr <=> mappedEntity.integerAttr;
    field required Scaled scaledAttr <=> mappedEntity.scaledAttr;
    field required SmallString stringAttr <=> mappedEntity.stringAttr;
    field required PhoneNumber regexAttr <=> mappedEntity.regexAttr;
    field required Boolean boolAttr <=> mappedEntity.boolAttr;
    field required Date dateAttr <=> mappedEntity.dateAttr;
    field required Timestamp timestampAttr <=> mappedEntity.timestampAttr;
    field required Time timeAttr <=> mappedEntity.timeAttr;
    field required Enum enumAttr <=> mappedEntity.enumAttr;

    constructor {
        self.integerAttr = 2;
        self.scaledAttr = 3.34;
        self.stringAttr = "Lorem Ipsum";
        self.regexAttr = "+36 (30) 123 5678";
        self.boolAttr = false;
        self.dateAttr = `2022-07-12`;
        self.timestampAttr = `2022-07-12T19:09:33Z`;
        self.timeAttr  = `23:59:58`;
        self.enumAttr = Enum#EnumB;
    }
}

//constructor with relation

entity EntityWithSingleRelation {
	field String name;
	relation EntityWithMultiRelation association;
	relation EntityWithMultiRelation[] associationCollection;
}

entity EntityWithMultiRelation {
	field String name;
	relation EntityWithSingleRelation twoWaySingleRelation opposite-add : entityWithTwoWayOpposite;
	relation EntityWithSingleRelation twoWayCollectionRelation opposite-add : entityWithTwoWayOppositeCollection[];
}

transfer MappedEntityWithSingleRelation maps EntityWithSingleRelation as e {

	relation MappedEntityWithMultiRelation mappedAssociation <=> e.association;
	relation MappedEntityWithMultiRelation[] mappedAssociationCollection <=> e.associationCollection;
    relation MappedEntityWithMultiRelation mappedAssociationOpposite <=> e.entityWithTwoWayOpposite;
    relation MappedEntityWithMultiRelation[] mappedAssociationOppositeCollection <=> e.entityWithTwoWayOppositeCollection;

    relation MappedEntityWithMultiRelation transientRelation;
    relation MappedEntityWithMultiRelation[] transientRelationCollection;

	constructor {
		self.mappedAssociation = EntityWithMultiRelation!any();
		self.mappedAssociationCollection = EntityWithMultiRelation!all();
		self.mappedAssociationOpposite = EntityWithMultiRelation!any();
		self.mappedAssociationOppositeCollection = EntityWithMultiRelation!all();
		self.transientRelation = EntityWithMultiRelation!any();
		self.transientRelationCollection = EntityWithMultiRelation!all();
	}
}

transfer MappedEntityWithMultiRelation maps EntityWithMultiRelation as e {
	field String name <=> e.name;
}

