model AssociationRelationships;

import judo::types;

entity EntityA {
    relation EntityC singleConA;
    relation required EntityC singleRequiredConA opposite twoWayMultipleAonC;
    relation EntityD[] multipleDonA opposite multipleAonD;
    derived Integer countD => self.multipleDonA!size();
}

entity abstract EntityB {
    relation EntityA[] multipleAonB;
}

entity EntityC extends EntityB {
    relation EntityD[] multipleDonC;
    relation EntityA[] twoWayMultipleAonC opposite singleRequiredConA;
}

entity EntityD {
    relation EntityA[] multipleAonD opposite multipleDonA;
    derived Integer countA => self.multipleAonD!size();
}

entity EntityE {
    relation EntityF[] multipleFOnE opposite-add singleEAdded;
}

entity EntityF {
}
