model RecursiveComposition;

type string String min-size:0 max-size:128;

entity EntityX {
    field String name;
    field EntityX x;
    field EntityX[] xs;
    field EntityY y;
    field EntityY[] ys;
}

entity EntityY {
    field String name;
    field EntityX yx;
    field EntityX[] yxs;
}

transfer TransferXTO (EntityX entityX) {
    field String name <=> entityX.name;
    relation TransferXTO x <=> entityX.x eager:true;
    relation TransferXTO[] xs <=> entityX.xs eager:true;
    relation TransferYTO y <=> entityX.y eager:true;
    relation TransferYTO[] ys <=> entityX.ys eager:true;
}

transfer TransferYTO (EntityY entityY) {
    field String name <=> entityY.name;
    relation TransferXTO yx <=> entityY.yx eager:true;
    relation TransferXTO[] yxs <=> entityY.yxs eager:true;
}

entity EntityA {
    field String name;
    field EntityA a;
    field EntityA[] `as`;

    field String childName <= self.a!isDefined() ? self.a.name : "";
    field String childNameThirdLevel <= self.a.a.name;
    field String childNameFourthLevel <= self.a.a.a.name;
}

entity EntityB extends EntityA {
    field EntityA ba;
    field EntityA[] bas;
}

transfer TransferATO (EntityA entityA) {
    field String name <=> entityA.name;
    relation TransferATO a <=> entityA.a eager:true;
    relation TransferATO[] `as` <=> entityA.`as` eager:true;

    field String childName <= entityA.a!isDefined() ? entityA.a.name : "";
    field String childNameThirdLevel <= entityA.a.a.name;
    field String childNameFourthLevel <= entityA.a.a.a.name;
}

transfer TransferBTO (EntityB entityB) {
    field String name <=> entityB.name;
    relation TransferATO a <=> entityB.a eager:true;
    relation TransferATO[] `as` <=> entityB.`as` eager:true;
    relation TransferATO ba <=> entityB.ba eager:true;
    relation TransferATO[] bas <=> entityB.bas eager:true;

    field String childName <= entityB.a!isDefined() ? entityB.a.name : "";
    field String childNameThirdLevel <= entityB.a.a.name;
    field String childNameFourthLevel <= entityB.a.a.a.name;
}
