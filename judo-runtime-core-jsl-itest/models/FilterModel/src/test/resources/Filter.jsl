model Filter;

import judo::types;

type numeric Scaled precision:9 scale:2;
type string PhoneNumber min-size:0 max-size:32 regex:"^(\\+\\d{1,2}\\s)?\\(?\\d{3}\\)?[\\s.-]\\d{3}[\\s.-]\\d{4}$";   // escape sequencing does not work in regexp....
type binary Binary mime-type:["text/plain"] max-file-size:1 GB ;
type string SmallString min-size:0 max-size:128;
type string CarId min-size:0 max-size:32 regex:"^\\w{4}-\\d{3}$";
type numeric Double precision:15 scale:4;

enum MyEnum {
    Atomic = 0;
    Bombastic = 1;
    Crazy = 2;
}

entity MyEntityWithOptionalFields {
    field Boolean boolAttr;
    field Binary binaryAttr;
    field Integer integerAttr;
    field SmallString stringAttr;
    field PhoneNumber regexAttr;
    field Scaled scaledAttr;
    field Date dateAttr;
    field Time timeAttr;
    field Timestamp timestampAttr;
    field MyEnum enumAttr;

    field Boolean derivedBoolAttr <= self.boolAttr;
    field Binary derivedBinaryAttr <= self.binaryAttr;
    field Integer derivedIntegerAttr <= self.integerAttr;
    field SmallString derivedStringAttr <= self.stringAttr;
    field PhoneNumber derivedRegexAttr <= self.regexAttr;
    field Scaled derivedScaledAttr <= self.scaledAttr;
    field Date derivedDateAttr <= self.dateAttr;
    field Time derivedTimeAttr <= self.timeAttr;
    field Timestamp derivedTimestampAttr <= self.timestampAttr;
    field MyEnum derivedEnumAttr <= self.enumAttr;

}

transfer TransferMyEntityWithOptionalFields (MyEntityWithOptionalFields mapped) {
    field Boolean boolAttr <= mapped.boolAttr bind;
    field Binary binaryAttr <= mapped.binaryAttr bind;
    field Integer integerAttr <= mapped.integerAttr bind;
    field SmallString stringAttr <= mapped.stringAttr bind;
    field PhoneNumber regexAttr <= mapped.regexAttr bind;
    field Scaled scaledAttr <= mapped.scaledAttr bind;
    field Date dateAttr <= mapped.dateAttr bind;
    field Time timeAttr <= mapped.timeAttr bind;
    field Timestamp timestampAttr <= mapped.timestampAttr bind;
    field MyEnum enumAttr <= mapped.enumAttr bind;

    field Boolean derivedBoolAttr  <= mapped.derivedBoolAttr;
    field Binary derivedBinaryAttr  <= mapped.derivedBinaryAttr;
    field Integer derivedIntegerAttr  <= mapped.derivedIntegerAttr;
    field SmallString derivedStringAttr  <= mapped.derivedStringAttr;
    field PhoneNumber derivedRegexAttr  <= mapped.derivedRegexAttr;
    field Scaled derivedScaledAttr  <= mapped.derivedScaledAttr;
    field Date derivedDateAttr  <= mapped.derivedDateAttr;
    field Time derivedTimeAttr  <= mapped.derivedTimeAttr;
    field Timestamp derivedTimestampAttr  <= mapped.derivedTimestampAttr;
    field MyEnum derivedEnumAttr  <= mapped.derivedEnumAttr;
}

entity FilterEntity {
    relation MyEntityWithOptionalFields[] haveTOnTheStringAttr <= MyEntityWithOptionalFields.all().filter(e | e.stringAttr.matches(pattern = ".*t.*"));
    relation MyEntityWithOptionalFields[] TestIsTheStringAttr <= MyEntityWithOptionalFields.all().filter(e | e.stringAttr.matches(pattern = "test"));
    relation MyEntityWithOptionalFields[] haveNoMatchOnTheStringAttr <= MyEntityWithOptionalFields.all().filter(e | e.stringAttr.matches(pattern = "noMatch"));
    relation MyEntityWithOptionalFields[] haveUndefinedOnTheStringAttr <= MyEntityWithOptionalFields.all().filter(e | e.stringAttr.isUndefined());
    relation MyEntityWithOptionalFields[] haveDefinedOnTheStringAttr <= MyEntityWithOptionalFields.all().filter(e | e.stringAttr.isDefined());
}

transfer TransferFilterEntity (FilterEntity mapped) {
    relation TransferMyEntityWithOptionalFields[] haveTOnTheStringAttr  <= mapped.haveTOnTheStringAttr;
    relation TransferMyEntityWithOptionalFields[] TestIsTheStringAttr  <= mapped.TestIsTheStringAttr;
    relation TransferMyEntityWithOptionalFields[] haveNoMatchOnTheStringAttr  <= mapped.haveNoMatchOnTheStringAttr;
    relation TransferMyEntityWithOptionalFields[] haveUndefinedOnTheStringAttr  <= mapped.haveUndefinedOnTheStringAttr;
    relation TransferMyEntityWithOptionalFields[] haveDefinedOnTheStringAttr  <= mapped.haveDefinedOnTheStringAttr;
}

// navigation in a filter : Car test

enum Continent {
    Africa = 1;
    Asia = 2;
    Europe = 3;
    America = 4;
    Antartica = 5;
    Australia = 6;
}

entity Country {
    field String name;
    field Continent continent;
}

transfer TransferCountry (Country mapped) {
    field String name <= mapped.name  bind;
    field Continent continent <= mapped.continent bind;
}

entity City {
    field String name;
    relation Country country;
}

transfer TransferCity (City mapped) {
    field String name <= mapped.name bind;
    relation TransferCountry country <= mapped.country choices:Country.all();
}

entity Person {
    field String name;
    relation City city;
}

transfer TransferPerson (Person mapped) {
    field String name <= mapped.name bind;
    relation TransferCity city <= mapped.city choices:City.all();
}

entity Car {
    field String licensePlate;
    relation Person owner;
}

transfer TransferCar (Car mapped) {
    field String licensePlate <= mapped.licensePlate bind;
    relation TransferPerson owner <= mapped.owner choices:Person.all();
}

entity Tester {
    relation Car[] carsOfTesztElek <= Car.all().filter(c | c.owner.name == "Teszt Elek");
    relation Car[] carsInBudapest <= Car.all().filter(c | c.owner.city.name == "Budapest");
    relation Car[] carsInHungary <= Car.all().filter(c | c.owner.city.country.name == "Hungary");
    relation Car[] carsOfKnownContinents <= Car.all().filter(c | c.owner.city.country.continent.isDefined());
}

transfer TransferTester (Tester mapped) {
    relation TransferCar[] carsOfTesztElek <= mapped.carsOfTesztElek;
    relation TransferCar[] carsInBudapest <= mapped.carsInBudapest;
    relation TransferCar[] carsInHungary <= mapped.carsInHungary;
    relation TransferCar[] carsOfKnownContinents <= mapped.carsOfKnownContinents;
}

// EmbeddedFilterTest

entity Product {
    field String name;
}

entity Item {
    field String name;
    field Double weight;
    relation Product product eager:true;
    // TODO JNG-4376
    //relation Item[] otherItems <= self.container( type = Bucket).items.filter( i | i != self );
}

entity Bucket {
    field Item[] items;
    relation Item mainItem <= self.items.first(i | i.name).any() eager:true;
    relation Item[] product1Items <= self.items.filter(i | i.product.name == "Product1") eager:true;
    // TODO JNG-4376
    //relation Item[] itemsHeavierThanBucketAvg <= self.items!filter(i | i.weight > self.items!avg(x | x.weight));
    relation Item[] itemsHeavierThanAvg <= self.items.filter(i | i.weight > Item.all().avg(x | x.weight)) eager:true;
}

entity BucketTester {
    relation Bucket[] bucketsWithProduct1 <= Bucket.all().filter(b | b.product1Items.size() !=  0) eager:true;
    relation Bucket[] bucketsWithMainProduct1 <=  Bucket.all().filter(b | b.mainItem.product.name == "Product1") eager:true;
}

transfer TransferProduct (Product mapped) {
    field String name <= mapped.name bind:true;
    event create onCreate;
}

transfer TransferItem (Item mapped) {
    field String name <= mapped.name bind:true;
    field Double weight <= mapped.weight bind:true;
    relation TransferProduct product <= mapped.product eager:true  choices:Product.all();
    event create onCreate;
}

transfer TransferBucket (Bucket mapped) {
    relation TransferItem[] items <= mapped.items eager:true create:true;
    relation TransferItem mainItem <= mapped.mainItem eager:true;
    relation TransferItem[] product1Items <= mapped.product1Items eager:true;
    relation TransferItem[] itemsHeavierThanAvg <= mapped.itemsHeavierThanAvg eager:true;
    event create onCreate;
}

transfer TransferBucketTester (BucketTester mapped) {
    relation TransferBucket[] bucketsWithProduct1 <= mapped.bucketsWithProduct1 eager:true;
    relation TransferBucket[] bucketsWithMainProduct1 <= mapped.bucketsWithMainProduct1 eager:true;
}

// AggregationFilterTest

entity OrderDetail {
        field String product;
        field Integer quantity;
}

entity Order {
    field OrderDetail[] items;
    relation Customer customer opposite: orders;
}

entity Customer {
    relation Order[] orders opposite: customer eager:true;
    relation Order[] ordersWithMultipleItems <= self.orders.filter(o | o.items.size() > 1);
}

transfer TransferOrderDetail (OrderDetail mapped) {
    field String product <= mapped.product bind:true;
    field Integer quantity <= mapped.quantity bind:true;
    event create onCreate;
}

transfer TransferOrder (Order mapped) {
    relation TransferCustomer customer <= mapped.customer;
    relation TransferOrderDetail[] items <= mapped.items eager:true create:true;
    event create onCreate;
}

transfer TransferCustomer (Customer mapped) {
    relation TransferOrder[] orders <= mapped.orders eager:true create:true choices: Order.all();
    relation TransferOrder[] ordersWithMultipleItems <= mapped.ordersWithMultipleItems;
}

// Filter Count Test

entity ParentA {
    field String ancestorName;
    relation B ancestorB;
    field String ancestorBName <= self.ancestorB.name;
}

entity A extends ParentA {
    field String name;
    field String bname <= self.ancestorB.name;
}

entity B {
    field String name;
}
