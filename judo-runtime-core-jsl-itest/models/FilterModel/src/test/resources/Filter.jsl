model Filter;

import judo::types;

type numeric Scaled precision:9 scale:2;
type string PhoneNumber min-size:0 max-size:32 regex:"^(\\+\\d{1,2}\\s)?\\(?\\d{3}\\)?[\\s.-]\\d{3}[\\s.-]\\d{4}$";   // escape sequencing does not work in regexp....
type binary Binary mime-type:["text/plain"] max-file-size:1 GB ;
type string SmallString min-size:0 max-size:128;
type string CarId min-size:0 max-size:32 regex:"^\\w{4}-\\d{3}$";

enum MyEnum {
    Atomic = 0;
    Bombastic = 1;
    Crazy = 2;
}

entity MyEntityWithOptionalFields {
    field Boolean boolAttr;
    field Binary binaryAttr;
    field Integer integerAttr;
    field SmallString stringAttr;
    field PhoneNumber regexAttr;
    field Scaled scaledAttr;
    field Date dateAttr;
    field Time timeAttr;
    field Timestamp timestampAttr;
    field MyEnum enumAttr;

    field Boolean derivedBoolAttr <= self.boolAttr;
    field Binary derivedBinaryAttr <= self.binaryAttr;
    field Integer derivedIntegerAttr <= self.integerAttr;
    field SmallString derivedStringAttr <= self.stringAttr;
    field PhoneNumber derivedRegexAttr <= self.regexAttr;
    field Scaled derivedScaledAttr <= self.scaledAttr;
    field Date derivedDateAttr <= self.dateAttr;
    field Time derivedTimeAttr <= self.timeAttr;
    field Timestamp derivedTimestampAttr <= self.timestampAttr;
    field MyEnum derivedEnumAttr <= self.enumAttr;

}

transfer TransferMyEntityWithOptionalFields (MyEntityWithOptionalFields mapped) {
    field Boolean boolAttr <= mapped.boolAttr update;
    field Binary binaryAttr <= mapped.binaryAttr update;
    field Integer integerAttr <= mapped.integerAttr update;
    field SmallString stringAttr <= mapped.stringAttr update;
    field PhoneNumber regexAttr <= mapped.regexAttr update;
    field Scaled scaledAttr <= mapped.scaledAttr update;
    field Date dateAttr <= mapped.dateAttr update;
    field Time timeAttr <= mapped.timeAttr update;
    field Timestamp timestampAttr <= mapped.timestampAttr update;
    field MyEnum enumAttr <= mapped.enumAttr update;

    field Boolean derivedBoolAttr  <= mapped.derivedBoolAttr;
    field Binary derivedBinaryAttr  <= mapped.derivedBinaryAttr;
    field Integer derivedIntegerAttr  <= mapped.derivedIntegerAttr;
    field SmallString derivedStringAttr  <= mapped.derivedStringAttr;
    field PhoneNumber derivedRegexAttr  <= mapped.derivedRegexAttr;
    field Scaled derivedScaledAttr  <= mapped.derivedScaledAttr;
    field Date derivedDateAttr  <= mapped.derivedDateAttr;
    field Time derivedTimeAttr  <= mapped.derivedTimeAttr;
    field Timestamp derivedTimestampAttr  <= mapped.derivedTimestampAttr;
    field MyEnum derivedEnumAttr  <= mapped.derivedEnumAttr;
}

entity FilterEntity {
    relation MyEntityWithOptionalFields[] haveTOnTheStringAttr <= MyEntityWithOptionalFields.all().filter(e | e.stringAttr.matches(pattern = ".*t.*"));
    relation MyEntityWithOptionalFields[] TestIsTheStringAttr <= MyEntityWithOptionalFields.all().filter(e | e.stringAttr.matches(pattern = "test"));
    relation MyEntityWithOptionalFields[] haveNoMatchOnTheStringAttr <= MyEntityWithOptionalFields.all().filter(e | e.stringAttr.matches(pattern = "noMatch"));
    relation MyEntityWithOptionalFields[] haveUndefinedOnTheStringAttr <= MyEntityWithOptionalFields.all().filter(e | e.stringAttr.isUndefined());
    relation MyEntityWithOptionalFields[] haveDefinedOnTheStringAttr <= MyEntityWithOptionalFields.all().filter(e | e.stringAttr.isDefined());
}

transfer TransferFilterEntity (FilterEntity mapped) {
    relation TransferMyEntityWithOptionalFields[] haveTOnTheStringAttr  <= mapped.haveTOnTheStringAttr;
    relation TransferMyEntityWithOptionalFields[] TestIsTheStringAttr  <= mapped.TestIsTheStringAttr;
    relation TransferMyEntityWithOptionalFields[] haveNoMatchOnTheStringAttr  <= mapped.haveNoMatchOnTheStringAttr;
    relation TransferMyEntityWithOptionalFields[] haveUndefinedOnTheStringAttr  <= mapped.haveUndefinedOnTheStringAttr;
    relation TransferMyEntityWithOptionalFields[] haveDefinedOnTheStringAttr  <= mapped.haveDefinedOnTheStringAttr;
}

// navigation in a filter : Car test

enum Continent {
    Africa = 1;
    Asia = 2;
    Europe = 3;
    America = 4;
    Antartica = 5;
    Australia = 6;
}

entity Country {
    field String name;
    field Continent continent;
}

transfer TransferCountry (Country mapped) {
    field String name <= mapped.name  update;
    field Continent continent <= mapped.continent update;
}

entity City {
    field String name;
    relation Country country;
}

transfer TransferCity (City mapped) {
    field String name <= mapped.name update;
    relation TransferCountry country <= mapped.country choices:Country.all();
}

entity Person {
    field String name;
    relation City city;
}

transfer TransferPerson (Person mapped) {
    field String name <= mapped.name update;
    relation TransferCity city <= mapped.city choices:City.all();
}

entity Car {
    field String licensePlate;
    relation Person owner;
}

transfer TransferCar (Car mapped) {
    field String licensePlate <= mapped.licensePlate update;
    relation TransferPerson owner <= mapped.owner choices:Person.all();
}

entity Tester {
    relation Car[] carsOfTesztElek <= Car.all().filter(c | c.owner.name == "Teszt Elek");
    relation Car[] carsInBudapest <= Car.all().filter(c | c.owner.city.name == "Budapest");
    relation Car[] carsInHungary <= Car.all().filter(c | c.owner.city.country.name == "Hungary");
    relation Car[] carsOfKnownContinents <= Car.all().filter(c | c.owner.city.country.continent.isDefined());
}

transfer TransferTester (Tester mapped) {
    relation TransferCar[] carsOfTesztElek <= mapped.carsOfTesztElek;
    relation TransferCar[] carsInBudapest <= mapped.carsInBudapest;
    relation TransferCar[] carsInHungary <= mapped.carsInHungary;
    relation TransferCar[] carsOfKnownContinents <= mapped.carsOfKnownContinents;
}

