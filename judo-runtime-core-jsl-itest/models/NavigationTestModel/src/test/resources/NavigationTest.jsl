model NavigationTest;

import judo::types;

entity A {
    relation B[] blist;
    relation C[] clist <= self.blist.c;
    relation B[] bbAll <= B.all();
    relation B bbAny <= B.any();

    field String bbAnyName <= B.any().name;
    field String selfBName <= self.bbAny.name;

    relation B[] bbAllFilter <= B.all().filter(b | b.name == "b");
    relation B bbAllFilterAny <= B.all().filter(b | b.name == "b").any();
    relation B bbAllFilterAny1 <= self.bbAllFilter.any();

    field String bbAllFilterAnyName <= B.all().filter(b | b.name == "b").any().name;
    field String bbAllFilterAnyName1 <= self.bbAllFilter.any().name;
    field String bbAllFilterAnyName2 <= self.bbAllFilterAny1.name;

    relation C[] selfbAllC <= self.bbAll.c;
    relation C selfbAllCAny <= self.bbAll.c.any();
    field String selfbAllCAnyName <= self.bbAll.c.any().name;

    relation C[] bbAllC <= B.all().c;
    relation C bbAllCAny <= B.all().c.any();
    field String bbAllCAnyName <= B.all().c.any().name;

    // selfNavigation
    relation A `self` <= self;
    relation B[] blistTroughDerivedSelf <= self.`self`.blist;
    relation C[] clistTroughDerivedSelf <= self.`self`.blist.c;
}

transfer TA (A mapped) {
    relation TB[] blist <= mapped.blist choices:B.all();
    relation TC[] clist  <= mapped.clist;
    relation TB[] bbAll  <= mapped.bbAll;
    relation TB bbAny  <= mapped.bbAny;

    field String bbAnyName  <= mapped.bbAnyName;
    field String selfBName  <= mapped.selfBName;

    relation TB[] bbAllFilter  <= mapped.bbAllFilter;
    relation TB bbAllFilterAny  <= mapped.bbAllFilterAny;
    relation TB bbAllFilterAny1  <= mapped.bbAllFilterAny1;

    field String bbAllFilterAnyName  <= mapped.bbAllFilterAnyName;
    field String bbAllFilterAnyName1  <= mapped.bbAllFilterAnyName1;
    field String bbAllFilterAnyName2  <= mapped.bbAllFilterAnyName2;

    relation TC[] selfbAllC  <= mapped.selfbAllC;
    relation TC selfbAllCAny  <= mapped.selfbAllCAny;
    field String selfbAllCAnyName  <= mapped.selfbAllCAnyName;

    relation TC[] bbAllC  <= mapped.bbAllC;
    relation TC bbAllCAny  <= mapped.bbAllCAny;
    field String bbAllCAnyName  <= mapped.bbAllCAnyName;

    // selfNavigation
    relation TA `self` <= mapped.`self`;
    relation TB[] blistTroughDerivedSelf <= mapped.blistTroughDerivedSelf;
    relation TC[] clistTroughDerivedSelf <= mapped.clistTroughDerivedSelf;
}

entity B {
    field String name;
    relation C c;
}

transfer TB (B mapped){
    field String name <= mapped.name update:auto;
    relation TC c <= mapped.c choices:C.all();
}

entity C {
   field String name;
}

transfer TC (C mapped){
    field String name <= mapped.name update:auto;
}

// PersonWithParents NavigationTest

enum SexType {
    MALE = 0;
    FEMALE = 1;
}

entity Person {
    field String name;
    field SexType sex;
    field Date birthDate;
    relation Person[] parents opposite-add: children[];

    field String motherName <= self.mother.name;
    field String fatherName <= self.father.name;
    field String grandMother1Name <= self.mother.motherName;
    field String greatGrandMother1Name <= self.mother.mother.motherName;
    field String grandMother2Name <= self.father.motherName;
    field String grandFather1Name <= self.mother.fatherName;
    field String grandFather2Name <= self.father.fatherName;
    field Boolean motherYoungerThanFather <= self.mother.birthDate > self.father.birthDate;

    relation Person mother <= self.parents.filter(p | p.sex == SexType#FEMALE ).any();
    relation Person father <= self.parents.filter(p | p.sex == SexType#MALE ).any();
}


entity AccessForThePrincipal {
    relation Person[] women <= Person.all().filter( p | p.sex == SexType#FEMALE );
    relation Person[] mothers <= Person.all().filter( p | p.sex == SexType#FEMALE ).filter( m | m.children.size() != 0 );
    relation Person[] fathers <= Person.all().filter( p | p.sex == SexType#MALE ).filter( m | m.children.size() != 0 );
    relation Person[] peopleWithYoungerMotherThanFather <= Person.all().filter( p | p.motherYoungerThanFather );
}


transfer TransferAccessForThePrincipal ( AccessForThePrincipal access ) {
    relation TransferPerson[] women <= access.women;
    relation TransferPerson[] mothers <= access.mothers;
    relation TransferPerson[] fathers <= access.fathers;
    relation TransferPerson[] peopleWithYoungerMotherThanFather <= access.peopleWithYoungerMotherThanFather;
}

transfer TransferPerson ( Person person ) {
    field String name <= person.name update:auto;
    field SexType sex <= person.sex  update:auto;
    field Date birthDate <= person.birthDate update:auto;
    relation TransferPerson[] parents <= person.parents choices:Person.all();
    relation TransferPerson[] children <= person.children choices:Person.all();

    field String motherName <= person.motherName;
    field String fatherName <= person.fatherName;
    field String grandMother1Name <= person.grandMother1Name;
    field String greatGrandMother1Name <= person.greatGrandMother1Name;
    field String grandMother2Name <= person.grandMother2Name;
    field String grandFather1Name <= person.grandFather1Name;
    field String grandFather2Name <= person.grandFather2Name;
    field Boolean motherYoungerThanFather <= person.motherYoungerThanFather;

    relation TransferPerson mother <= person.mother;
    relation TransferPerson father <= person.father;
}
