model CompositionRelationships;

type string String min-size:0 max-size:128;

entity Composition {
  field EntityA entityA;
  field EntityA[] entityAs;
}

entity EntityA {
    field String stringA;
    field EntityC singleConA;
    field EntityC[] collectionConA;
    field EntityC singleRequiredConA required;
}

entity EntityB abstract {
    field String stringB;
    field EntityD[] multipleDonB;
}

entity EntityC extends EntityB {
    field String stringC;
}

entity EntityD {
    field String stringD;
}

entity EntityE extends EntityD, EntityC {
    field String stringE;
}

entity EntityF {
  field EntityG g;
}

entity EntityG {
  field String name default:EntityH.any().alwaysUndefined required;
}

entity EntityH {
  field String alwaysUndefined;
}

entity EntityF2 {
  field EntityH h;
}

entity EntityF3 {
  field EntityG[] g;
}

entity EntityF4 {
  field EntityH[] h;
}

transfer TransferA(EntityA entitya) {
    field String stringA <= entitya.stringA bind;
    relation TransferC singleConA <= entitya.singleConA eager:true;
    relation TransferC[] collectionConA <= entitya.collectionConA eager:true;
    relation TransferC singleRequiredConA <= entitya.singleRequiredConA eager:true required;
}

transfer TransferC(EntityC entityc) {
    field String stringC <= entityc.stringC bind;
    field String stringB <= entityc.stringB bind;
    relation TransferD[] multipleDonB <= entityc.multipleDonB eager:true;
}

transfer TransferD(EntityD entityd) {
    field String stringD <= entityd.stringD bind;
}

//

entity Container {
    field Containment1[] compCont1;
    field Containment2[] compCont2;

}

entity Containment1 {
    relation Containment2[] containment2 opposite-add: containment1[];
}

entity Containment2 {
}

//

entity EntityJ {
    field String name;
    field EntityK compK;
    field EntityL compL;
}

entity EntityK {
    field String name;
}

entity EntityL {
    field String name;
    relation EntityK relK required;
}
