model CompositionRelationships;

type string String min-size:0 max-size:128;

entity Composition {
  field EntityA entityA;
  field EntityA[] entityAs;
}

entity EntityA {
    field String stringA;
    field EntityC singleConA;
    field EntityC[] collectionConA;
    field required EntityC singleRequiredConA;
}

entity abstract EntityB {
    field String stringB;
    field EntityD[] multipleDonB;
}

entity EntityC extends EntityB {
    field String stringC;
}

entity EntityD {
    field String stringD;
}

entity EntityE extends EntityD, EntityC {
    field String stringE;
}

entity EntityF {
  field EntityG g;
}

entity EntityG {
  field required String name = EntityH!any().alwaysUndefined;
}

entity EntityH {
  field String alwaysUndefined;
}

entity EntityF2 {
  field EntityH h;
}

entity EntityF3 {
  field EntityG[] g;
}

entity EntityF4 {
  field EntityH[] h;
}

transfer TransferA(EntityA entitya) {
    field String stringA <=> entitya.stringA;
    @Embedded
    relation TransferC singleConA <=> entitya.singleConA;
    @Embedded
    relation TransferC[] collectionConA <=> entitya.collectionConA;
    @Embedded
    relation required TransferC singleRequiredConA <=> entitya.singleRequiredConA;
}

transfer TransferC(EntityC entityc) {
    field String stringC <=> entityc.stringC;
    field String stringB <=> entityc.stringB;
    @Embedded
    relation TransferD[] multipleDonB <=> entityc.multipleDonB;
}

transfer TransferD(EntityD entityd) {
    field String stringD <=> entityd.stringD;
}
