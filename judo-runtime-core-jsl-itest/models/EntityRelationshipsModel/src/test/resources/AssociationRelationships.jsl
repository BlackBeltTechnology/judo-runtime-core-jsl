model AssociationRelationships;

import judo::types;

entity EntityA {
    relation EntityC singleConA;
    relation EntityC singleRequiredConA opposite:twoWayMultipleAonC required;
    relation EntityD[] multipleDonA opposite:multipleAonD;
    field Integer countD <= self.multipleDonA.size();
}

entity EntityB abstract {
    relation EntityA[] multipleAonB;
}

entity EntityC extends EntityB {
    relation EntityD[] multipleDonC;
    relation EntityA[] twoWayMultipleAonC opposite:singleRequiredConA;
}

entity EntityD {
    relation EntityA[] multipleAonD opposite:multipleDonA;
    field Integer countA <= self.multipleAonD.size();
}

entity EntityE {
    relation EntityF[] multipleFOnE opposite-add:singleEAdded;
}

entity EntityF {
}
