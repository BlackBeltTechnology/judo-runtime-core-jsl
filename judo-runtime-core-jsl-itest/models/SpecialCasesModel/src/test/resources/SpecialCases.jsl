model SpecialCases;

import judo::types;

// Imported types with no field definition

entity TestEntity {
    field Boolean dateSmaller default:Date.of(year = 2023, month = 4, day = 17) < Date.of(year = 2023, month = 4, day = 19);
    field Boolean timeSmaller default:Time.of(hour = 11, minute = 11) < Time.of(hour = 11, minute = 19);
    field Boolean timestampSmaller default:Timestamp.of(date = `2023-04-17`) < Timestamp.of(date = `2023-04-19`);
}

// Model name with java keyword test

entity Abstract {

}

// Entity with the same query name

entity ReferenceEntity {
    field String name;
}
entity entityA {
    relation ReferenceEntity querySameName <= ReferenceEntity.any();
}
entity entityB {
    relation ReferenceEntity querySameName <= ReferenceEntity.any();
}

// Builder copy the collection recursively

entity C {
    field String name;
    field D[] compD;
}

entity D {
    field E[] compE;
}

entity E {

}

// Test UUID methods work well

entity F {
    field E compE;
    field required E reqCompE;
    field E[] compECol;
    relation E relE;
    relation required E reqRelE;
    relation E[] relECol;

    field Integer calculatedPrimitive <= 1;
    relation E calculatedEntity <= self.reqRelE;

}

query Integer queryPrimitive(Integer num) on F <= num;
query E queryEntity(Integer num) on F <= self.reqRelE;