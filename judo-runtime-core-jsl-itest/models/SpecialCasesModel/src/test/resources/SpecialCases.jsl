model SpecialCases;

import judo::types;

// Imported types with no field definition

entity TestEntity {
    field Boolean dateSmaller default:Date.of(year = 2023, month = 4, day = 17) < Date.of(year = 2023, month = 4, day = 19);
    field Boolean timeSmaller default:Time.of(hour = 11, minute = 11) < Time.of(hour = 11, minute = 19);
    field Boolean timestampSmaller default:Timestamp.of(date = `2023-04-17`) < Timestamp.of(date = `2023-04-19`);
}

// Model name with java keyword test

entity Abstract {

}

// Entity with the same query name

entity ReferenceEntity {
    field String name;
}
entity entityA {
    relation ReferenceEntity querySameName <= ReferenceEntity.any();
}
entity entityB {
    relation ReferenceEntity querySameName <= ReferenceEntity.any();
}

// Builder copy the collection recursively

entity C {
    field String name;
    field D[] compD;
}

entity D {
    field E[] compE;
    field String stringD;
}

entity E {
    field String stringE;
}

entity EntityF {
    field String stringF required;
    field D[] multipleDonF;
}

entity EntityG {
    field String stringG;
    field E singleRequiredEonG required;
}

transfer TransferD(D d) {
    relation TransferE[] compE <= d.compE eager:true create:true;
    field String stringD <= d.stringD bind;
    event create createEvent;
}

transfer TransferE(E e) {
    field String stringE <= e.stringE bind;
    event create createEvent;
}

transfer TransferF(EntityF entityf) {
    field String stringF <= entityf.stringF required bind;
    relation TransferD[] multipleDonF <= entityf.multipleDonF eager:true create:true;
}

transfer TransferG(EntityG entityG) {
    field String stringG <= entityG.stringG bind;
    relation TransferE singleRequiredEonG <= entityG.singleRequiredEonG required eager:true create:true;
}

// Test UUID methods work well

entity F {
    field E compE;
    field E reqCompE required;
    field E[] compECol;
    relation E relE;
    relation E reqRelE required;
    relation E[] relECol;

    field Integer calculatedPrimitive <= 1;
    relation E calculatedEntity <= self.reqRelE;

}

query Integer queryPrimitive(Integer num) on F <= num;
query E queryEntity(Integer num) on F <= self.reqRelE;

// HungarianStringQueryCustomizer

entity Tester {
    relation RelationTarget[] relationTargets;
}

entity RelationTarget {
    field String name;
}

// not safe names

entity Class {
    field String safeName;
    field String class;
    relation If if;
    relation Case[] case;
    relation If safeRel;
}

entity If {
    field Case case;
    field Static[] `static`;
}

entity Case {
}

entity Static {
}

entity PrimUpper {
    field String Abc;
    field String ABd;
    field String ABE;
    field String AbF;
}

entity RelUpper {
    relation Ref Abc;
    relation Ref ABd;
    relation Ref ABE;
    relation Ref AbF;
}

entity RelMultiUpper {
    relation Ref[] Abc;
    relation Ref[] ABd;
    relation Ref[] ABE;
    relation Ref[] AbF;
}

entity CompUpper {
    field Ref Abc;
    field Ref ABd;
    field Ref ABE;
    field Ref AbF;
}

entity CompMultiUpper {
    field Ref[] Abc;
    field Ref[] ABd;
    field Ref[] ABE;
    field Ref[] AbF;
}

entity Ref {
    field String Name;
}

// Check that derived relations are not validated.

entity Container {
    field String name required;
    relation Containment1 derivedContainment1 <= Containment1.all().any();
}

entity Containment1 {
    field String name required;
    relation Containment2 containmet2 required;
}


entity Containment2 {
    field String name required;
}

transfer ContainerTransfer (Container c) {
    field String name <= c.name bind required;
    relation Containment1Transfer derivedContainment1 <= c.derivedContainment1 eager:true;
    relation Containment1Transfer transientRel;
}

transfer Containment1Transfer (Containment1 c) {
    field String name <= c.name bind required;
    relation Containment2Transfer containmet2 <= c.containmet2 eager:true create:true required;
    event create eventCreate();
}

transfer Containment2Transfer (Containment2 c) {
    field String name <= c.name bind required;
    event create eventCreate();
}

enum Continent {
    Africa = 1;
    Asia = 2;
    Europe = 3;
    America = 4;
    Antarctica = 5;
    Australia = 6;
}

