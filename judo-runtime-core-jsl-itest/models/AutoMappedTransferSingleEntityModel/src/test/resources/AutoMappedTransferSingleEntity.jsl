model AutoMappedTransferSingleEntity;

import judo::types;

entity ReferenceEntity {
    field String name;
}

entity ContainerSingleCompositionEntity {
    field ReferenceEntity singleComposition;
    field required ReferenceEntity singleRequiredComposition;
    //TODO JNG-4909
    field ReferenceEntity singleCompositionDefault = ReferenceEntity!all()!filter(e | e.name == "CompositionDefault")!any();
//     field required ReferenceEntity singleRequiredCompositionDefault = ReferenceEntity!all()!filter(e | e.name == "RequiredCompositionDefault")!any(); //error
}

transfer AutoMappedReferenceEntity(ReferenceEntity mappedEntity);

transfer AutoMappedContainerSingleComposition(ContainerSingleCompositionEntity mappedEntity);


// TODO JNG-4906
entity TwoWayReferenceEntity {
    field String name;
}

transfer AutoMappedTwoWayReferenceEntity(TwoWayReferenceEntity mappedEntity);

entity ContainerSingleAssociationEntity {
    relation ReferenceEntity singleRelation;
    relation required ReferenceEntity singleRequiredRelation;
    relation TwoWayReferenceEntity twoWayReferenceEntityRelation opposite-add : twoWayContainerRelation;
}

transfer AutoMappedContainerSingleAssociation(ContainerSingleAssociationEntity mappedEntity);

entity ContainerSingleCompositionDerivedEntity {

    field ReferenceEntity singleComposition;
    field required ReferenceEntity singleRequiredComposition;
    field ReferenceEntity singleCompositionDefault = ReferenceEntity!all()!filter(e | e.name == "CompositionDefault")!any();
    // TODO JNG-4909
//     field required ReferenceEntity singleRequiredCompositionDefaultEntity = ReferenceEntity!all()!filter(e | e.name == "RequiredCompositionDefault")!any(); //error

    relation ReferenceEntity singleCompositionEntityExpressionDerived <= referenceEntityWithNameQuery(name ="singleComposition");
    relation ReferenceEntity singleCompositionEntityMemberDerived <= self.singleComposition;
    relation ReferenceEntity singleCompositionEntityRequiredMemberDerived <= self.singleRequiredComposition;
    relation ReferenceEntity singleCompositionEntityQueryMemberDerived <= self.singleCompositionEntityExpressionQuery(name ="singleComposition");

    @Query
    relation ReferenceEntity singleCompositionEntityExpressionQuery(String name) <= referenceEntityWithNameQuery(name = name);

}

transfer AutoMappedContainerSingleCompositionDerivedEntity(ContainerSingleCompositionDerivedEntity mappedEntity);

query ReferenceEntity referenceEntityWithNameQuery(String name) <= ReferenceEntity!all()!filter(e | e.name == name)!any();

query Integer countReferenceEntityWithNameQuery(String name) <= ReferenceEntity!all()!filter(e | e.name == name)!size();

entity ContainerSingleRelationDerivedEntity {

    relation ReferenceEntity singleRelation;
    relation required ReferenceEntity singleRequiredRelation;
    relation TwoWayReferenceEntity twoWayReferenceEntityRelation opposite-add : twoWayContainerRelationOnDerived;

    relation ReferenceEntity singleRelationEntityExpressionDerived <= referenceEntityWithNameQuery(name ="singleRelation");
    relation ReferenceEntity singleRelationEntityMemberDerived <= self.singleRelation;
    relation ReferenceEntity singleRelationEntityRequiredMemberDerived <= self.singleRequiredRelation;
    relation ReferenceEntity singleRelationEntityQueryMemberDerived <= self.singleRelationEntityExpressionQuery(name ="singleRelation");

    @Query
    relation ReferenceEntity singleRelationEntityExpressionQuery(String name) <= referenceEntityWithNameQuery(name = name);

    @Query
    field Integer primitiveQuery(String name) <= countReferenceEntityWithNameQuery(name = name);

}

transfer AutoMappedContainerSingleRelationDerivedEntity(ContainerSingleRelationDerivedEntity mappedEntity);
