model MappedTransferCompositonAssociation;

import judo::types;

// not required Single and Multi
entity EntityA {
    field EntityB singleEntityB;
    field EntityB[] multiEntityB;
}

entity EntityB {
    field String nameB;
}

transfer TransferA (EntityA a) {
    relation TransferB singleEntityB <= a.singleEntityB create:true;
    relation TransferB[] multiEntityB <= a.multiEntityB create:true;
}

transfer TransferB (EntityB b) {
    field String nameB <= b.nameB update:auto;
    event instead create create;
}

// required single

entity EntityC {
    field required EntityD singleRequiredEntityD;
}

entity EntityD {
    field String nameD;
}

transfer TransferC (EntityC c) {
    relation required TransferD singleRequiredEntityD <= c.singleRequiredEntityD create:true;
}

transfer TransferD (EntityD d) {
    field String nameD <= d.nameD update:auto;
    event instead create create;
}

// TwoWayAssociationAlongWithComposition

entity BankAccount {
    identifier required String accountNumber;
    relation Company company opposite: mainBankAccounts;
}

entity Company {
    field required String name;
    relation BankAccount mainBankAccounts opposite:company;
    field BankAccount[] bankAccounts;
}

transfer MappedBankAccount ( BankAccount acc ) {
    field required String accountNumber <= acc.accountNumber update:auto;
    relation MappedCompany company <= acc.company;
    event instead create create;
}

transfer MappedCompany ( Company comp ) {
    field required String name <= comp.name update:auto;
    relation MappedBankAccount mainBankAccounts <= comp.mainBankAccounts choices: comp.bankAccounts eager:true create:true;
    relation MappedBankAccount[] bankAccounts <= comp.bankAccounts eager:true create:true;
}
