model MappedTransferAssociationAssociation;

import judo::types;

// Single relation

entity EntityA {
    field String nameA;
    relation EntityB relationBonA;
}

entity EntityB {
    field String nameB;
}

transfer TransferA (EntityA a) {
    field String nameB <= a.nameA update:auto;
    relation TransferB relationBonA <= a.relationBonA choices:EntityB.all();
}

transfer TransferB (EntityB b) {
    field String nameB <= b.nameB update:auto;
}

// Single required relation
entity EntityC {
    field String nameC;
    relation required EntityD relationDonC;
}

entity EntityD {
    field String nameD;
}

transfer TransferC (EntityC c) {
    field String nameC <= c.nameC update:auto;
    relation required TransferD relationDonC <= c.relationDonC choices:EntityD.all();
}

transfer TransferD (EntityD d) {
    field String nameD <= d.nameD update:auto;
}

// Multi relation
entity EntityE {
    field String nameE;
    relation EntityF[] relationFonE;
}

entity EntityF {
    field String nameF;
}

transfer TransferE (EntityE e) {
    field String nameE <= e.nameE update:auto;
    relation TransferF[] relationFonE <= e.relationFonE choices:EntityF.all();
}

transfer TransferF (EntityF f) {
    field String nameF <= f.nameF update:auto;
}

// TwoWay Relations

/*
Two way relation pattern

optional <-> optional
optional <-> required
optional <-> collection

required <-> optional
required <-> required
required <-> collection

collection <-> optional
collection <-> required
collection <-> collection

*/

entity EntityG {
    field String nameG;
    relation EntityH relationOptionalH opposite-add: relationGForOptionalH;
    relation required EntityH relationRequiredH opposite-add: relationGForRequiredH;
    relation EntityH[] relationCollectionH opposite-add: relationGForCollectionH;
}

entity EntityH {
    field String nameH;
}

transfer TransferG (EntityG g) {
    field String nameG <= g.nameG update:auto;
    relation TransferH relationOptionalH <= g.relationOptionalH choices:EntityH.all();
    relation required TransferH relationRequiredH <= g.relationRequiredH choices:EntityH.all();
    relation TransferH[] relationCollectionH <= g.relationCollectionH choices:EntityH.all();
}

transfer TransferH (EntityH h) {
    field String nameH <= h.nameH update:auto;
    relation TransferG relationGForOptionalH <= h.relationGForOptionalH choices:EntityG.all();
    relation TransferG relationGForRequiredH <= h.relationGForRequiredH choices:EntityG.all();
    relation TransferG relationGForCollectionH <= h.relationGForCollectionH choices:EntityG.all();
}

entity EntityI {
    field String nameI;
    relation EntityJ relationOptionalJ opposite: relationRequiredIForOptionalJ;
    relation EntityJ[] relationCollectionJ opposite: relationRequiredIorCollectionJ;
}

entity EntityJ {
    field String nameJ;
    relation required EntityI relationRequiredIForOptionalJ opposite: relationOptionalJ;
    relation required EntityI relationRequiredIorCollectionJ opposite: relationCollectionJ;
}

transfer TransferI (EntityI i) {
    field String nameI <= i.nameI update:auto;
    relation TransferJ relationOptionalJ <= i.relationOptionalJ choices:EntityJ.all();
    relation TransferJ[] relationCollectionJ <= i.relationCollectionJ choices:EntityJ.all();
}

transfer TransferJ (EntityJ j) {
    field String nameJ <= j.nameJ update:auto;
    relation required TransferI relationRequiredIForOptionalJ <= j.relationRequiredIForOptionalJ choices:EntityI.all();
    relation required TransferI relationRequiredIorCollectionJ <= j.relationRequiredIorCollectionJ choices:EntityI.all();
}

entity EntityK {
    field String nameK;
    relation EntityL[] relationCollectionL opposite-add: relationCollectionKForCollectionL[];
}

entity EntityL {
    field String nameL;
}

transfer TransferK (EntityK k) {
    field String nameK <= k.nameK update:auto;
    relation TransferL[] relationCollectionL <= k.relationCollectionL choices:EntityL.all();
}

transfer TransferL (EntityL l) {
    field String nameL <= l.nameL update:auto;
    relation TransferK[] relationCollectionKForCollectionL <= l.relationCollectionKForCollectionL choices:EntityK.all();
}
