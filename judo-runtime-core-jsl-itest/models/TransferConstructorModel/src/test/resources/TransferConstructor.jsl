model TransferConstructor;

import judo::types;

type numeric Scaled precision:9 scale:2;
type string PhoneNumber min-size:0 max-size:32 regex:"^(\\+\\d{1,2})[\\s.-]?(\\d{1,3})?[\\s.-]\\d{3}[\\s.-]\\d{3,4}$";
type binary Binary mime-type:["text/plain"] max-file-size:1 GB;
type string SmallString min-size:0 max-size:128;

//constructor with relation

entity EntityWithSingleRelation {
	field String name;
	relation EntityWithMultiRelation association;
	relation EntityWithMultiRelation[] associationCollection;
}

entity EntityWithMultiRelation {
	field String name;
	relation EntityWithSingleRelation twoWaySingleRelation opposite-add : entityWithTwoWayOpposite;
	relation EntityWithSingleRelation twoWayCollectionRelation opposite-add : entityWithTwoWayOppositeCollection[];
}

transfer MappedEntityWithSingleRelation maps EntityWithSingleRelation as e {

	relation MappedEntityWithMultiRelation mappedAssociation <= e.association choices:EntityWithMultiRelation.all() default:EntityWithMultiRelation.any();
	relation MappedEntityWithMultiRelation[] mappedAssociationCollection <= e.associationCollection choices:EntityWithMultiRelation.all() default:EntityWithMultiRelation.all();
    relation MappedEntityWithMultiRelation mappedAssociationOpposite <= e.entityWithTwoWayOpposite choices:EntityWithMultiRelation.all() default:EntityWithMultiRelation.any();
    relation MappedEntityWithMultiRelation[] mappedAssociationOppositeCollection <= e.entityWithTwoWayOppositeCollection choices:EntityWithMultiRelation.all() default:EntityWithMultiRelation.all();

    relation MappedEntityWithMultiRelation transientRelation default:EntityWithMultiRelation.any();
    relation MappedEntityWithMultiRelation[] transientRelationCollection default:EntityWithMultiRelation.all();
}

transfer MappedEntityWithMultiRelation maps EntityWithMultiRelation as e {
	field String name <= e.name update:auto;
}