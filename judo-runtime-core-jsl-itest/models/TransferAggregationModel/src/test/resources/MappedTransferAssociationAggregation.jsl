model MappedTransferAssociationAggregation;

import judo::types;

// Single relation

entity EntityA {
    field String nameA;
    relation EntityB relationBonA;
}

entity EntityB {
    field String nameB;
}

transfer TransferA (EntityA a) {
    field String nameB <= a.nameA update:auto;
    relation TransferB relationBonA <= a.relationBonA eager:true choices:EntityB.all();
}

transfer TransferB (EntityB b) {
    field String nameB <= b.nameB update:auto;
}

// Single required relation
entity EntityC {
    field String nameC;
    relation EntityD relationDonC required;
}

entity EntityD {
    field String nameD;
}

transfer TransferC (EntityC c) {
    field String nameC <= c.nameC update:auto;
    relation TransferD relationDonC <= c.relationDonC eager:true choices:EntityD.all() required;
}

transfer TransferD (EntityD d) {
    field String nameD <= d.nameD update:auto;
}

// Multi relation
entity EntityE {
    field String nameE;
    relation EntityF[] relationFonE;
}

entity EntityF {
    field String nameF;
}

transfer TransferE (EntityE e) {
    field String nameE <= e.nameE update:auto;
    relation TransferF[] relationFonE <= e.relationFonE eager:true choices:EntityF.all();
}

transfer TransferF (EntityF f) {
    field String nameF <= f.nameF update:auto;
}


// TwoWay Relations

/*
Two way relation pattern

Left side is aggregation
Right side is association

optional <-> optional
optional <-> required
optional <-> collection

required <-> optional
required <-> required
required <-> collection

collection <-> optional
collection <-> required
collection <-> collection

*/

entity EntityG {
    field String nameG;
    relation EntityH relationOptionalH opposite-add: relationGForOptionalH;
    relation EntityH relationRequiredH opposite-add: relationGForRequiredH required;
    relation EntityH[] relationCollectionH opposite-add: relationGForCollectionH;
}

entity EntityH {
    field String nameH;
}

transfer TransferG (EntityG g) {
    field String nameG <= g.nameG update:auto;
    relation TransferH relationOptionalH <= g.relationOptionalH eager:true choices:EntityH.all();
    relation TransferH relationRequiredH <= g.relationRequiredH eager:true choices:EntityH.all() required;
    relation TransferH[] relationCollectionH <= g.relationCollectionH eager:true choices:EntityH.all();
}

transfer TransferH (EntityH h) {
    field String nameH <= h.nameH update:auto;
    relation TransferG relationGForOptionalH <= h.relationGForOptionalH choices:EntityG.all();
    relation TransferG relationGForRequiredH <= h.relationGForRequiredH choices:EntityG.all();
    relation TransferG relationGForCollectionH <= h.relationGForCollectionH choices:EntityG.all();
}

entity EntityI {
    field String nameI;
    relation EntityJ relationOptionalJ opposite: relationRequiredIForOptionalJ;
    relation EntityJ[] relationCollectionJ opposite: relationRequiredIorCollectionJ;
}

entity EntityJ {
    field String nameJ;
    relation EntityI relationRequiredIForOptionalJ opposite: relationOptionalJ required;
    relation EntityI relationRequiredIorCollectionJ opposite: relationCollectionJ required;
}

transfer TransferI (EntityI i) {
    field String nameI <= i.nameI update:auto;
    relation TransferJ relationOptionalJ <= i.relationOptionalJ eager:true choices:EntityJ.all();
    relation TransferJ[] relationCollectionJ <= i.relationCollectionJ eager:true choices:EntityJ.all();
}

transfer TransferJ (EntityJ j) {
    field String nameJ <= j.nameJ update:auto;
    relation TransferI relationRequiredIForOptionalJ <= j.relationRequiredIForOptionalJ choices:EntityI.all() required;
    relation TransferI relationRequiredIorCollectionJ <= j.relationRequiredIorCollectionJ choices:EntityI.all() required;
}

entity EntityK {
    field String nameK;
    relation EntityL[] relationCollectionL opposite-add: relationCollectionKForCollectionL[];
}

entity EntityL {
    field String nameL;
}

transfer TransferK (EntityK k) {
    field String nameK <= k.nameK update:auto;
    relation TransferL[] relationCollectionL <= k.relationCollectionL eager:true choices:EntityL.all();
}

transfer TransferL (EntityL l) {
    field String nameL <= l.nameL update:auto;
    relation TransferK[] relationCollectionKForCollectionL <= l.relationCollectionKForCollectionL choices:EntityK.all();
}

// Navigation trough transfers

entity EntityM {
    field String nameM;
    relation EntityN relationNonM;
}

entity EntityN {
    relation EntityO[] relationOonN;
}

entity EntityO {
    field String nameO;
}

transfer TransferM (EntityM m) {
    field String nameM <= m.nameM update:auto;
    relation TransferN relationNonM <= m.relationNonM eager:true choices:EntityN.all();
}

transfer TransferN (EntityN n) {
    relation TransferO[] relationOonN <= n.relationOonN eager:true choices:EntityO.all();
}

transfer TransferO (EntityO o) {
        field String nameO <= o.nameO update:auto;
}

entity H {
    field String stringH;
    field J singleJonH;
    field J[] collectionJonH;
    field J singleRequiredJonH required;
}

entity I abstract {
    field String stringI;
    field K[] multipleKonI;
}

entity J extends I {
    field String stringJ;
}

entity K {
    field String stringK;
}

transfer TH(H entityh) {
    field String stringH <= entityh.stringH update:auto;
    relation TJ singleJonH <= entityh.singleJonH eager:true create:true;
    relation TJ[] collectionJonH <= entityh.collectionJonH eager:true create:true;
    relation TJ singleRequiredJonH <= entityh.singleRequiredJonH eager:true create:true required;
}

transfer TJ(J entityj) {
    field String stringI <= entityj.stringI update:auto;
    field String stringJ <= entityj.stringJ update:auto;
    relation TK[] multipleKonI <= entityj.multipleKonI eager:true create:true;
    event create eventCreate();
}

transfer TK(K entityk) {
    field String stringK <= entityk.stringK update:auto;
    event create eventCreate();
}
