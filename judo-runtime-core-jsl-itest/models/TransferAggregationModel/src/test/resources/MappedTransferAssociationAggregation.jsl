model MappedTransferAssociationAggregation;

import judo::types;

// Single relation

entity EntityA {
    field String nameA;
    relation EntityB relationBonA;
}

entity EntityB {
    field String nameB;
}

transfer TransferA (EntityA a) {
    field String nameB <=> a.nameA;
    relation TransferB relationBonA <=> a.relationBonA eager:true;
}

transfer TransferB (EntityB b) {
    field String nameB <=> b.nameB;
}

// Single required relation
entity EntityC {
    field String nameC;
    relation required EntityD relationDonC;
}

entity EntityD {
    field String nameD;
}

transfer TransferC (EntityC c) {
    field String nameC <=> c.nameC;
    relation required TransferD relationDonC <=> c.relationDonC eager:true;
}

transfer TransferD (EntityD d) {
    field String nameD <=> d.nameD;
}

// Multi relation
entity EntityE {
    field String nameE;
    relation EntityF[] relationFonE;
}

entity EntityF {
    field String nameF;
}

transfer TransferE (EntityE e) {
    field String nameE <=> e.nameE;
    relation TransferF[] relationFonE <=> e.relationFonE eager:true;
}

transfer TransferF (EntityF f) {
    field String nameF <=> f.nameF;
}


// TwoWay Relations

/*
Two way relation pattern

Left side is aggregation
Right side is association

optional <-> optional
optional <-> required
optional <-> collection

required <-> optional
required <-> required
required <-> collection

collection <-> optional
collection <-> required
collection <-> collection

*/

entity EntityG {
    field String nameG;
    relation EntityH relationOptionalH opposite-add: relationGForOptionalH;
    relation required EntityH relationRequiredH opposite-add: relationGForRequiredH;
    relation EntityH[] relationCollectionH opposite-add: relationGForCollectionH;
}

entity EntityH {
    field String nameH;
}

transfer TransferG (EntityG g) {
    field String nameG <=> g.nameG;
    relation TransferH relationOptionalH <=> g.relationOptionalH eager:true;
    relation required TransferH relationRequiredH <=> g.relationRequiredH eager:true;
    relation TransferH[] relationCollectionH <=> g.relationCollectionH eager:true;
}

transfer TransferH (EntityH h) {
    field String nameH <=> h.nameH;
    relation TransferG relationGForOptionalH <=> h.relationGForOptionalH;
    relation TransferG relationGForRequiredH <=> h.relationGForRequiredH;
    relation TransferG relationGForCollectionH <=> h.relationGForCollectionH;
}

entity EntityI {
    field String nameI;
    relation EntityJ relationOptionalJ opposite: relationRequiredIForOptionalJ;
    relation EntityJ[] relationCollectionJ opposite: relationRequiredIorCollectionJ;
}

entity EntityJ {
    field String nameJ;
    relation required EntityI relationRequiredIForOptionalJ opposite: relationOptionalJ;
    relation required EntityI relationRequiredIorCollectionJ opposite: relationCollectionJ;
}

transfer TransferI (EntityI i) {
    field String nameI <=> i.nameI;
    relation TransferJ relationOptionalJ <=> i.relationOptionalJ eager:true;
    relation TransferJ[] relationCollectionJ <=> i.relationCollectionJ eager:true;
}

transfer TransferJ (EntityJ j) {
    field String nameJ <=> j.nameJ;
    relation required TransferI relationRequiredIForOptionalJ <=> j.relationRequiredIForOptionalJ;
    relation required TransferI relationRequiredIorCollectionJ <=> j.relationRequiredIorCollectionJ;
}

entity EntityK {
    field String nameK;
    relation EntityL[] relationCollectionL opposite-add: relationCollectionKForCollectionL[];
}

entity EntityL {
    field String nameL;
}

transfer TransferK (EntityK k) {
    field String nameK <=> k.nameK;
    relation TransferL[] relationCollectionL <=> k.relationCollectionL eager:true;
}

transfer TransferL (EntityL l) {
    field String nameL <=> l.nameL;
    relation TransferK[] relationCollectionKForCollectionL <=> l.relationCollectionKForCollectionL;
}

// Navigation trough transfers

entity EntityM {
    field String nameM;
    relation EntityN relationNonM;
}

entity EntityN {
    relation EntityO[] relationOonN;
}

entity EntityO {
    field String nameO;
}

transfer TransferM (EntityM m) {
    field String nameM <=> m.nameM;
    relation TransferN relationNonM <=> m.relationNonM eager:true;
}

transfer TransferN (EntityN n) {
    relation TransferO[] relationOonN <=> n.relationOonN eager:true;
}

transfer TransferO (EntityO o) {
        field String nameO <=> o.nameO;
}

entity H {
    field String stringH;
    field J singleJonH;
    field J[] collectionJonH;
    field required J singleRequiredJonH;
}

entity abstract I {
    field String stringI;
    field K[] multipleKonI;
}

entity J extends I {
    field String stringJ;
}

entity K {
    field String stringK;
}

transfer TH(H entityh) {
    field String stringH <=> entityh.stringH;
    relation TJ singleJonH <=> entityh.singleJonH eager:true;
    relation TJ[] collectionJonH <=> entityh.collectionJonH eager:true;
    relation required TJ singleRequiredJonH <=> entityh.singleRequiredJonH eager:true;
}

transfer TJ(J entityj) {
    field String stringI <=> entityj.stringI;
    field String stringJ <=> entityj.stringJ;
    relation TK[] multipleKonI <=> entityj.multipleKonI eager:true;
}

transfer TK(K entityk) {
    field String stringK <=> entityk.stringK;
}
