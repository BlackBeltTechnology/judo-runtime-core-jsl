model MappedTransferCompositonAggregation;

import judo::types;

entity Composition {
  field EntityA entityA;
  field EntityA[] entityAs;
}

transfer TransferComposition (Composition comp) {
	@Embedded
    relation TransferA transferA <=> comp.entityA;
    @Embedded
    relation TransferA[] transferAs <=> comp.entityAs;
}

// not required Single and Multi
entity EntityA {
    field String stringA;
    field EntityB singleEntityB;
    field EntityB[] multiEntityB;
}

entity EntityB {
    field String nameB;
}

transfer TransferA (EntityA a) {
    relation TransferB singleEntityB <= a.singleEntityB eager:true;
    relation TransferB[] multiEntityB <= a.multiEntityB eager:true;
}

transfer TransferB (EntityB b) {
    field String nameB <= b.nameB input:true;
}

// required single

entity EntityC {
    field required EntityD singleRequiredEntityD;
}

entity EntityD {
    field String nameD;
}

transfer TransferC (EntityC c) {
    relation required TransferD singleRequiredEntityD <= c.singleRequiredEntityD eager:true;

}

transfer TransferD (EntityD d) {
    field String nameD <= d.nameD input:true;
}

// Navigation trough transfers

entity EntityE {
    field EntityF singleEntityF;
}

entity EntityF {
    field EntityG[] multiEntityG;
}

entity EntityG {
    field String nameG;
}

transfer TransferE (EntityE e) {
    relation TransferF singleEntityF <= e.singleEntityF eager:true;
}

transfer TransferF (EntityF f) {
    relation TransferG[] multiEntityG <= f.multiEntityG eager:true;
}

transfer TransferG (EntityG g) {
        field String nameG <= g.nameG input:true;
}

entity EntityH {
    field String stringH;
    field EntityJ singleJonH;
    field EntityJ[] collectionJonH;
    field required EntityJ singleRequiredJonH;
}

entity abstract EntityI {
    field String stringI;
    field EntityK[] multipleKonI;
}

entity EntityJ extends EntityI {
    field String stringJ;
}

entity EntityK {
    field String stringK;
}

transfer TransferH(EntityH entityh) {
    field String stringH <= entityh.stringH input:true;
    relation TransferJ singleJonH <= entityh.singleJonH eager:true;
    relation TransferJ[] collectionJonH <= entityh.collectionJonH eager:true;
    relation required TransferJ singleRequiredJonH <= entityh.singleRequiredJonH eager:true;
}

transfer TransferJ(EntityJ entityj) {
    field String stringI <= entityj.stringI input:true;
    field String stringJ <= entityj.stringJ input:true;
    relation TransferK[] multipleKonI <= entityj.multipleKonI eager:true;
}

transfer TransferK(EntityK entityk) {
    field String stringK <= entityk.stringK input:true;
}
