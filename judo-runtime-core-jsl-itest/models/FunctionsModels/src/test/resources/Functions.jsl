model Functions;

import FunctionsExternals as FE;

type numeric Integer precision:15 scale:0;
type numeric Scaled precision:15 scale:2;
type string String min-size:0 max-size:128;
type boolean Boolean;
type date Date;
type timestamp Timestamp;
type time Time;
type binary Binary mime-type:["text/plain"] max-file-size:1 GB;


enum MyEnum {
    Atomic = 0;
    Bombastic = 1;
    Crazy = 2;
}

entity Simple {
	field String stringAttr;
	field Integer firstNum <= Simple.all().first(s | s.stringAttr).size();
}

transfer TransferSimple (Simple mapped) {
	field String stringAttr <= mapped.stringAttr update:auto;
	field Integer firstNum <= mapped.firstNum;
}

entity Entity {
    field Integer integerAttr;
    field Scaled scaledAttr;
    field String stringAttr;
    field Boolean boolAttr;
    field Date dateAttr;
    field Timestamp timestampAttr;
    field Time timeAttr;
}

transfer TransferEntity (Entity mapped) {
    field Integer integerAttr <= mapped.integerAttr update:auto;
    field Scaled scaledAttr <= mapped.scaledAttr update:auto;
    field String stringAttr <= mapped.stringAttr update:auto;
    field Boolean boolAttr <= mapped.boolAttr update:auto;
    field Date dateAttr <= mapped.dateAttr update:auto;
    field Timestamp timestampAttr <= mapped.timestampAttr update:auto;
    field Time timeAttr <= mapped.timeAttr update:auto;
    
    event create eventCreate();
}

entity EntityWithPrimitiveDefaults {
    field Integer integerAttr default:1;
    field Scaled scaledAttr default:2.34;
    field String stringAttr default:"test";
    field Boolean boolAttr default:true;
    field Date dateAttr default:`2022-07-11`;
    field Timestamp timestampAttr default:`2022-07-11T19:09:33Z`;
    field Time timeAttr default:`23:59:59`;
}

transfer TransferEntityWithPrimitiveDefaults (EntityWithPrimitiveDefaults mapped) {
    field Integer integerAttr <= mapped.integerAttr update:auto;
    field Scaled scaledAttr <= mapped.scaledAttr update:auto;
    field String stringAttr <= mapped.stringAttr update:auto;
    field Boolean boolAttr <= mapped.boolAttr update:auto;
    field Date dateAttr <= mapped.dateAttr update:auto;
    field Timestamp timestampAttr <= mapped.timestampAttr update:auto;
    field Time timeAttr <= mapped.timeAttr update:auto;
    
    event create eventCreate();
}

entity Functions {
    field Entity `entity`;
    field EntityWithPrimitiveDefaults entityWithPrimitives;
}

transfer TransferFunctions (Functions mapped) {
    relation TransferEntity `entity` <= mapped.`entity` eager:true;
    relation TransferEntityWithPrimitiveDefaults entityWithPrimitives <= mapped.entityWithPrimitives eager:true create:true;
}

entity AnyTypeFunctions extends Functions {

    field Boolean integerIsDefinedFalse <= self.`entity`.integerAttr.isDefined();
    field Boolean integerIsDefinedTrue <= self.entityWithPrimitives.integerAttr.isDefined();
    field Boolean integerIsUndefinedTrue <= self.`entity`.integerAttr.isUndefined();
    field Boolean integerIsUndefinedFalse <= self.entityWithPrimitives.integerAttr.isUndefined();

    field Boolean scaledIsDefinedFalse <= self.`entity`.scaledAttr.isDefined();
    field Boolean scaledIsDefinedTrue <= self.entityWithPrimitives.scaledAttr.isDefined();
    field Boolean scaledIsUndefinedTrue <= self.`entity`.scaledAttr.isUndefined();
    field Boolean scaledIsUndefinedFalse <= self.entityWithPrimitives.scaledAttr.isUndefined();

    field Boolean stringIsDefinedFalse <= self.`entity`.stringAttr.isDefined();
    field Boolean stringIsDefinedTrue <= self.entityWithPrimitives.stringAttr.isDefined();
    field Boolean stringIsUndefinedTrue <= self.`entity`.stringAttr.isUndefined();
    field Boolean stringIsUndefinedFalse <= self.entityWithPrimitives.stringAttr.isUndefined();

    field Boolean boolIsDefinedFalse <= self.`entity`.boolAttr.isDefined();
    field Boolean boolIsDefinedTrue <= self.entityWithPrimitives.boolAttr.isDefined();
    field Boolean boolIsUndefinedTrue <= self.`entity`.boolAttr.isUndefined();
    field Boolean boolIsUndefinedFalse <= self.entityWithPrimitives.boolAttr.isUndefined();

    field Boolean dateIsDefinedFalse <= self.`entity`.dateAttr.isDefined();
    field Boolean dateIsDefinedTrue <= self.entityWithPrimitives.dateAttr.isDefined();
    field Boolean dateIsUndefinedTrue <= self.`entity`.dateAttr.isUndefined();
    field Boolean dateIsUndefinedFalse <= self.entityWithPrimitives.dateAttr.isUndefined();

    field Boolean timestampIsDefinedFalse <= self.`entity`.timestampAttr.isDefined();
    field Boolean timestampIsDefinedTrue <= self.entityWithPrimitives.timestampAttr.isDefined();
    field Boolean timestampIsUndefinedTrue <= self.`entity`.timestampAttr.isUndefined();
    field Boolean timestampIsUndefinedFalse <= self.entityWithPrimitives.timestampAttr.isUndefined();

    field Boolean timeIsDefinedFalse <= self.`entity`.timeAttr.isDefined();
    field Boolean timeIsDefinedTrue <= self.entityWithPrimitives.timeAttr.isDefined();
    field Boolean timeIsUndefinedTrue <= self.`entity`.timeAttr.isUndefined();
    field Boolean timeIsUndefinedFalse <= self.entityWithPrimitives.timeAttr.isUndefined();

    field String stringOrElse <= "apple".orElse(value = "grape");
    field Integer numberOrElse <= 2.orElse(value = 1);
    field Integer numberOrElse2 <= self.`entity`.integerAttr.orElse(value = 3);
    field Integer numberOrElse3 <= self.`entity`.integerAttr.orElse(value = -4.9).abs().orElse(value = 0.abs()).floor();
}

transfer TransferAnyTypeFunctions (AnyTypeFunctions mapped) {

    relation TransferEntity `entity` <= mapped.`entity` eager:true create:true;
    relation TransferEntityWithPrimitiveDefaults entityWithPrimitives <= mapped.entityWithPrimitives eager:true create:true;

    field Boolean integerIsDefinedFalse  <= mapped.integerIsDefinedFalse;
    field Boolean integerIsDefinedTrue  <= mapped.integerIsDefinedTrue;
    field Boolean integerIsUndefinedTrue  <= mapped.integerIsUndefinedTrue;
    field Boolean integerIsUndefinedFalse  <= mapped.integerIsUndefinedFalse;

    field Boolean scaledIsDefinedFalse  <= mapped.scaledIsDefinedFalse;
    field Boolean scaledIsDefinedTrue  <= mapped.scaledIsDefinedTrue;
    field Boolean scaledIsUndefinedTrue  <= mapped.scaledIsUndefinedTrue;
    field Boolean scaledIsUndefinedFalse  <= mapped.scaledIsUndefinedFalse;

    field Boolean stringIsDefinedFalse  <= mapped.stringIsDefinedFalse;
    field Boolean stringIsDefinedTrue  <= mapped.stringIsDefinedTrue;
    field Boolean stringIsUndefinedTrue  <= mapped.stringIsUndefinedTrue;
    field Boolean stringIsUndefinedFalse  <= mapped.stringIsUndefinedFalse;

    field Boolean boolIsDefinedFalse  <= mapped.boolIsDefinedFalse;
    field Boolean boolIsDefinedTrue  <= mapped.boolIsDefinedTrue;
    field Boolean boolIsUndefinedTrue  <= mapped.boolIsUndefinedTrue;
    field Boolean boolIsUndefinedFalse  <= mapped.boolIsUndefinedFalse;

    field Boolean dateIsDefinedFalse  <= mapped.dateIsDefinedFalse;
    field Boolean dateIsDefinedTrue  <= mapped.dateIsDefinedTrue;
    field Boolean dateIsUndefinedTrue  <= mapped.dateIsUndefinedTrue;
    field Boolean dateIsUndefinedFalse  <= mapped.dateIsUndefinedFalse;

    field Boolean timestampIsDefinedFalse  <= mapped.timestampIsDefinedFalse;
    field Boolean timestampIsDefinedTrue  <= mapped.timestampIsDefinedTrue;
    field Boolean timestampIsUndefinedTrue  <= mapped.timestampIsUndefinedTrue;
    field Boolean timestampIsUndefinedFalse  <= mapped.timestampIsUndefinedFalse;

    field Boolean timeIsDefinedFalse  <= mapped.timeIsDefinedFalse;
    field Boolean timeIsDefinedTrue  <= mapped.timeIsDefinedTrue;
    field Boolean timeIsUndefinedTrue  <= mapped.timeIsUndefinedTrue;
    field Boolean timeIsUndefinedFalse  <= mapped.timeIsUndefinedFalse;

    field String stringOrElse  <= mapped.stringOrElse;
    field Integer numberOrElse  <= mapped.numberOrElse;
    field Integer numberOrElse2  <= mapped.numberOrElse2;
    field Integer numberOrElse3  <= mapped.numberOrElse3;
}

entity StringFunctions {
    field String undefined;

    field Integer length <= "apple".size();
    field String first <= "apple".left(count = 2);
    field String last <= "apple".right(count = 1);
    field Integer position <= "apple".position(substring = "p");
    field String substring <= "apple".substring(count = 2, offset = 3);
    field String lower <= "ApPlE".lower();
    field String lowerCase <= "ApPlE".lower();
    field String upper <= "ApPlE".upper();
    field String upperCase <= "ApPlE".upper();
    field String capitalize <= "apPlE".capitalize();
    field Boolean matches <= "apple".matches(pattern = r".*pl.");

    field Boolean like <= "apple".like(pattern = "%pl_");
    field Boolean likeFalse <= "apple".like(pattern = "%qwe%");
    field Boolean likeOnUndefined <= self.undefined.like(pattern = "%qwe%");
    field Boolean ilike <= "apple".ilike(pattern = "%pL_");
    field Boolean ilikeFalse <= "apple".ilike(pattern = "%qWE%");
    field Boolean ilikeOnUndefined <= self.undefined.ilike(pattern = "%qWE%");

    field String replace <= "apple".replace(oldstring = "le", newstring = "endix");
    field String trim <= " apple ".trim();
    field String ltrim <= " apple ".ltrim();
    field String rtrim <= " apple ".rtrim();

    field String lpad <= "apple".lpad(size = 10);
    field Boolean lpadTrue <= "apple".lpad(size = 10).isDefined();
    field Boolean lpadFalse <= "apple".lpad(size = 10).isUndefined();
    field String lpad1 <= "apple".lpad(size = 10, padstring = "*");
    field String lpad2 <= "apple".lpad(size = 2);
    field String lpad3 <= "apple".lpad(size = 2, padstring = "*");
    field String rpad <= "apple".rpad(size = 10);
    field String rpad1 <= "apple".rpad(size = 10, padstring = "*");
    field String rpad2 <= "apple".rpad(size = 2);
    field String rpad3 <= "apple".rpad(size = 2, padstring = "*");

    field String lpadUndefined <= self.undefined.lpad(size = 10);
    field Boolean lpadUndefinedFalse <= self.undefined.lpad(size = 10).isDefined();
    field Boolean lpadUndefinedTrue <= self.undefined.lpad(size = 10).isUndefined();
    field String lpadUndefined1 <= self.undefined.lpad(size = 10, padstring = "*");
    field String rpadUndefined <= self.undefined.rpad(size = 10);
    field String rpadUndefined1 <= self.undefined.rpad(size = 10, padstring = "*");

    field String parenthizedAsString <= (12 + 14).asString();
}

transfer TransferStringFunctions (StringFunctions mapped) {
    field String undefined <= mapped.undefined;

    field Integer length <= mapped.length;
    field String first <= mapped.first;
    field String last <= mapped.last;
    field Integer position <= mapped.position;
    field String substring <= mapped.substring;
    field String lower <= mapped.lower;
    field String lowerCase <= mapped.lowerCase;
    field String upper <= mapped.upper;
    field String upperCase <= mapped.upperCase;
    field String capitalize <= mapped.capitalize;
    field Boolean matches <= mapped.matches;

    field Boolean like <= mapped.like;
    field Boolean likeFalse <= mapped.likeFalse;
    field Boolean likeOnUndefined <= mapped.likeOnUndefined;
    field Boolean ilike <= mapped.ilike;
    field Boolean ilikeFalse <= mapped.ilikeFalse;
    field Boolean ilikeOnUndefined <= mapped.ilikeOnUndefined;

    field String replace <= mapped.replace;
    field String trim <= mapped.trim;
    field String ltrim <= mapped.ltrim;
    field String rtrim <= mapped.rtrim;

    field String lpad <= mapped.lpad;
    field Boolean lpadTrue <= mapped.lpadTrue;
    field Boolean lpadFalse <= mapped.lpadFalse;
    field String lpad1 <= mapped.lpad1;
    field String lpad2 <= mapped.lpad2;
    field String lpad3 <= mapped.lpad3;
    field String rpad <= mapped.rpad;
    field String rpad1 <= mapped.rpad1;
    field String rpad2 <= mapped.rpad2;
    field String rpad3 <= mapped.rpad3;

    field String lpadUndefined <= mapped.lpadUndefined;
    field Boolean lpadUndefinedFalse <= mapped.lpadUndefinedFalse;
    field Boolean lpadUndefinedTrue <= mapped.lpadUndefinedTrue;
    field String lpadUndefined1 <= mapped.lpadUndefined1;
    field String rpadUndefined <= mapped.rpadUndefined;
    field String rpadUndefined1 <= mapped.rpadUndefined1;

    field String parenthizedAsString <= mapped.parenthizedAsString;
}

entity NumericFunctions {
    field Integer int default:1;
    field Scaled neg default:-2.5;
    field Scaled neg1 default:-1.23;
    field Scaled neg2 default:-7.89;
    field Scaled neg3 default:-2.9;
    field Integer neg4 default:-3;

    field Integer roundInt <= self.int.round();
    field Integer roundInt2 <= 1.round();
    field Integer roundScaled1 <= 1.23.round();
    field Integer roundScaled2 <= 7.89.round();
    field Integer roundScaled3 <= 2.50.round();
    field Integer roundScaledNegative1 <= self.neg.round();
    field Integer roundScaledNegative2 <= self.neg1.round();
    field Integer roundScaledNegative3 <= self.neg2.round();

    field Scaled roundIntScaled <= self.int.round(scale = 1);
    field Scaled roundInt2Scaled <= 1.round(scale = 1);
    field Scaled roundScaled1Scaled <= 1.23.round(scale = 1);
    field Scaled roundScaled2Scaled <= 7.89.round(scale = 1);
    field Scaled roundScaled3Scaled <= 2.50.round(scale = 1);
    field Scaled roundScaledNegative1Scaled <= self.neg.round(scale = 1);
    field Scaled roundScaledNegative2Scaled <= self.neg1.round(scale = 1);
    field Scaled roundScaledNegative3Scaled <= self.neg2.round(scale = 1);

    field Integer floorInt <= 1.floor();
    field Integer floorScaled1 <= 2.9.floor();
    field Integer floorScaled2 <= self.neg3.floor();

    field Integer ceilInt <= 1.ceil();
    field Integer ceilScaled1 <= 2.9.ceil();
    field Integer ceilScaled2 <= self.neg3.ceil();

    field Integer absInt <= 1.abs();
    field Integer absInt2 <= self.neg4.abs();
    field Scaled absScaled1 <= 2.9.abs();
    field Scaled absScaled2 <= self.neg3.abs();

    field String intAsString <= 1.asString();
    field String scaledAsString <= 123456.789.asString();
}

transfer TransferNumericFunctions (NumericFunctions mapped) {
    field Integer int <= mapped.int update:auto;
    field Scaled neg <= mapped.neg update:auto;
    field Scaled neg1 <= mapped.neg1 update:auto;
    field Scaled neg2 <= mapped.neg2 update:auto;
    field Scaled neg3 <= mapped.neg3 update:auto;
    field Integer neg4 <= mapped.neg4 update:auto;

    field Integer roundInt <= mapped.roundInt;
    field Integer roundInt2 <= mapped.roundInt2;
    field Integer roundScaled1 <= mapped.roundScaled1;
    field Integer roundScaled2 <= mapped.roundScaled2;
    field Integer roundScaled3 <= mapped.roundScaled3;
    field Integer roundScaledNegative1 <= mapped.roundScaledNegative1;
    field Integer roundScaledNegative2 <= mapped.roundScaledNegative2;
    field Integer roundScaledNegative3 <= mapped.roundScaledNegative3;

    field Scaled roundIntScaled <= mapped.roundIntScaled;
    field Scaled roundInt2Scaled <= mapped.roundInt2Scaled;
    field Scaled roundScaled1Scaled <= mapped.roundScaled1Scaled;
    field Scaled roundScaled2Scaled <= mapped.roundScaled2Scaled;
    field Scaled roundScaled3Scaled <= mapped.roundScaled3Scaled;
    field Scaled roundScaledNegative1Scaled <= mapped.roundScaledNegative1Scaled;
    field Scaled roundScaledNegative2Scaled <= mapped.roundScaledNegative2Scaled;
    field Scaled roundScaledNegative3Scaled <= mapped.roundScaledNegative3Scaled;

    field Integer floorInt <= mapped.floorInt;
    field Integer floorScaled1 <= mapped.floorScaled1;
    field Integer floorScaled2 <= mapped.floorScaled2;

    field Integer ceilInt <= mapped.ceilInt;
    field Integer ceilScaled1 <= mapped.ceilScaled1;
    field Integer ceilScaled2 <= mapped.ceilScaled2;

    field Integer absInt <= mapped.absInt;
    field Integer absInt2 <= mapped.absInt2;
    field Scaled absScaled1 <= mapped.absScaled1;
    field Scaled absScaled2 <= mapped.absScaled2;

    field String intAsString <= mapped.intAsString;
    field String scaledAsString <= mapped.scaledAsString;
}

/*
|=============================================================================================
|`p`            |`q`            |`p or q`       |`p and q`      |`p xor q`      |`p implies q`
|`true`	        |`true`	        |`true` 	    |`true`	        |`false`        |`true`
|`true`	        |`false`	    |`true`         |`false`	    |`true`         |`false`
|`true`	        |`undefined`	|`true`	        |`undefined`	|`undefined`    |`undefined`
|`false`	    |`true`	        |`true`	        |`false`	    |`true`         |`true`
|`false`	    |`false`	    |`false`	    |`false`	    |`false`        |`true`
|`false`	    |`undefined`	|`undefined`	|`false`	    |`undefined`    |`true`
|`undefined`	|`true`	        |`true`	        |`undefined`	|`undefined`    |`true`
|`undefined`	|`false`	    |`undefined`	|`false`	    |`undefined`    |`undefined`
|`undefined`	|`undefined`	|`undefined`	|`undefined`	|`undefined`    |`undefined`
|=============================================================================================
 */
entity Kleene {
	field Boolean undefined;
	field Boolean bool default:true;

	field Boolean trueOrTrue <= (true or true);
	field Boolean trueOrFalse <= (true or false);
	field Boolean trueOrUndefined <= (true or self.undefined);
	field Boolean falseOrTrue <= (false or true);
	field Boolean falseOrFalse <= (false or false);
	field Boolean falseOrUndefined <= (false or self.undefined);
	field Boolean undefinedOrTrue <= (self.undefined or true);
	field Boolean undefinedOrFalse <= (self.undefined or false);
	field Boolean undefinedOrUndefined <= (self.undefined or self.undefined);

	field Boolean trueAndTrue <= (true and true);
	field Boolean trueAndFalse <= (true and false);
	field Boolean trueAndUndefined <= (true and self.undefined);
	field Boolean falseAndTrue <= (false and true);
	field Boolean falseAndFalse <= (false and false);
	field Boolean falseAndUndefined <= (false and self.undefined);
	field Boolean undefinedAndTrue <= (self.undefined and true);
	field Boolean undefinedAndFalse <= (self.undefined and false);
	field Boolean undefinedAndUndefined <= (self.undefined and self.undefined);

	field Boolean trueXorTrue <= (true xor true);
	field Boolean trueXorFalse <= (true xor false);
	field Boolean trueXorUndefined <= (true xor self.undefined);
	field Boolean falseXorTrue <= (false xor true);
	field Boolean falseXorFalse <= (false xor false);
	field Boolean falseXorUndefined <= (false xor self.undefined);
	field Boolean undefinedXorTrue <= (self.undefined xor true);
	field Boolean undefinedXorFalse <= (self.undefined xor false);
	field Boolean undefinedXorUndefined <= (self.undefined xor self.undefined);

	field Boolean trueImpliesTrue <= (true implies true);
	field Boolean trueImpliesFalse <= (true implies false);
	field Boolean trueImpliesUndefined <= (true implies self.undefined);
	field Boolean falseImpliesTrue <= (false implies true);
	field Boolean falseImpliesFalse <= (false implies false);
	field Boolean falseImpliesUndefined <= (false implies self.undefined);
	field Boolean undefinedImpliesTrue <= (self.undefined implies true);
	field Boolean undefinedImpliesFalse <= (self.undefined implies false);
	field Boolean undefinedImpliesUndefined <= (self.undefined implies self.undefined);
}

transfer TransferKleene (Kleene mapped) {
	field Boolean undefined <= mapped.undefined update:auto;
	field Boolean bool <= mapped.bool update:auto;

	field Boolean trueOrTrue <= mapped.trueOrTrue;
	field Boolean trueOrFalse <= mapped.trueOrFalse;
	field Boolean trueOrUndefined <= mapped.trueOrUndefined;
	field Boolean falseOrTrue <= mapped.falseOrTrue;
	field Boolean falseOrFalse <= mapped.falseOrFalse;
	field Boolean falseOrUndefined <= mapped.falseOrUndefined;
	field Boolean undefinedOrTrue <= mapped.undefinedOrTrue;
	field Boolean undefinedOrFalse <= mapped.undefinedOrFalse;
	field Boolean undefinedOrUndefined <= mapped.undefinedOrUndefined;

	field Boolean trueAndTrue <= mapped.trueAndTrue;
	field Boolean trueAndFalse <= mapped.trueAndFalse;
	field Boolean trueAndUndefined <= mapped.trueAndUndefined;
	field Boolean falseAndTrue <= mapped.falseAndTrue;
	field Boolean falseAndFalse <= mapped.falseAndFalse;
	field Boolean falseAndUndefined <= mapped.falseAndUndefined;
	field Boolean undefinedAndTrue <= mapped.undefinedAndTrue;
	field Boolean undefinedAndFalse <= mapped.undefinedAndFalse;
	field Boolean undefinedAndUndefined <= mapped.undefinedAndUndefined;

	field Boolean trueXorTrue <= mapped.trueXorTrue;
	field Boolean trueXorFalse <= mapped.trueXorFalse;
	field Boolean trueXorUndefined <= mapped.trueXorUndefined;
	field Boolean falseXorTrue <= mapped.falseXorTrue;
	field Boolean falseXorFalse <= mapped.falseXorFalse;
	field Boolean falseXorUndefined <= mapped.falseXorUndefined;
	field Boolean undefinedXorTrue <= mapped.undefinedXorTrue;
	field Boolean undefinedXorFalse <= mapped.undefinedXorFalse;
	field Boolean undefinedXorUndefined <= mapped.undefinedXorUndefined;

	field Boolean trueImpliesTrue <= mapped.trueImpliesTrue;
	field Boolean trueImpliesFalse <= mapped.trueImpliesFalse;
	field Boolean trueImpliesUndefined <= mapped.trueImpliesUndefined;
	field Boolean falseImpliesTrue <= mapped.falseImpliesTrue;
	field Boolean falseImpliesFalse <= mapped.falseImpliesFalse;
	field Boolean falseImpliesUndefined <= mapped.falseImpliesUndefined;
	field Boolean undefinedImpliesTrue <= mapped.undefinedImpliesTrue;
	field Boolean undefinedImpliesFalse <= mapped.undefinedImpliesFalse;
	field Boolean undefinedImpliesUndefined <= mapped.undefinedImpliesUndefined;
}

entity BooleanFunctions {
    field Boolean bool default:true;

    field String ownBoolAsString <= self.bool.asString();
    field String trueAsString <= true.asString();
    field String falseAsString <= false.asString();
    field String logicalExpressionAsString <= (true or true).asString();
}

transfer TransferBooleanFunctions (BooleanFunctions mapped) {
    field Boolean bool <= mapped.bool update:auto;

    field String ownBoolAsString <= mapped.ownBoolAsString;
    field String trueAsString <= mapped.trueAsString;
    field String falseAsString <= mapped.falseAsString;
    field String logicalExpressionAsString <= mapped.logicalExpressionAsString;
}


entity DateFunctions {
    field Date `date` default:`2022-07-11`;
    field Date undefined;

    field String ownDateAsString <= self.`date`.asString();
    field String dateAsString <= `2021-03-02`.asString();
    field Integer year <= `2021-03-02`.year();
    field Integer month <= `2021-03-02`.month();
    field Integer day <= `2021-03-02`.day();
    field Date of <= Date.of(year = 2011, month = 1, day = 28);

    field Integer dayOfYear <= `2022-10-07`.dayOfYear();
    field Integer dayOfWeekMonday <= `2022-10-03`.dayOfWeek();
    field Integer dayOfWeekTuesday <= `2022-10-04`.dayOfWeek();
    field Integer dayOfWeekWednesday <= `2022-10-05`.dayOfWeek();
    field Integer dayOfWeekThursday <= `2022-10-06`.dayOfWeek();
    field Integer dayOfWeekFriday <= `2022-10-07`.dayOfWeek();
    field Integer dayOfWeekSaturday <= `2022-10-08`.dayOfWeek();
    field Integer dayOfWeekSunday <= `2022-10-09`.dayOfWeek();

    field Integer dayOfYearUndefined <= self.undefined.dayOfYear();
    field Integer dayOfWeekUndefined <= self.undefined.dayOfWeek();
}

transfer TransferDateFunctions (DateFunctions mapped ) {
    field Date `date` <= mapped.date;
    field Date undefined <= mapped.undefined;

    field String ownDateAsString <= mapped.ownDateAsString;
    field String dateAsString <= mapped.dateAsString;
    field Integer year <= mapped.year;
    field Integer month <= mapped.month;
    field Integer day <= mapped.day;
    field Date of <= mapped.of;

    field Integer dayOfYear <= mapped.dayOfYear;
    field Integer dayOfWeekMonday <= mapped.dayOfWeekMonday;
    field Integer dayOfWeekTuesday <= mapped.dayOfWeekTuesday;
    field Integer dayOfWeekWednesday <= mapped.dayOfWeekWednesday;
    field Integer dayOfWeekThursday <= mapped.dayOfWeekThursday;
    field Integer dayOfWeekFriday <= mapped.dayOfWeekFriday;
    field Integer dayOfWeekSaturday <= mapped.dayOfWeekSaturday;
    field Integer dayOfWeekSunday <= mapped.dayOfWeekSunday;

    field Integer dayOfYearUndefined <= mapped.dayOfYearUndefined;
    field Integer dayOfWeekUndefined <= mapped.dayOfWeekUndefined;
}

entity TimeFunctions {
    field Time timeHM default:`12:34`;
    field Time timeHM1 default:Time.of(hour = 12, minute = 34);
    field Time timeHMS default:`12:34:56`;
    field Time timeHMS1 default:Time.of(hour = 12, minute = 34, second = 56);
    field Time timeHMSF default:`12:34:56.789`;
    field Time timeHMSF1 default:Time.of(hour = 12, minute = 34, second = 56, millisecond = 789);
    field Time timeHMSF2 default:Time.of(hour = 12, minute = 34, millisecond = 789);

    field Time undefinedTime;
    field Integer undefinedNumber;
    field Integer number;

    // self
    field String selfTimeHMAsString <= self.timeHM.asString();
    field Integer selfTimeHMHour <= self.timeHM.hour();
    field Integer selfTimeHMMinute <= self.timeHM.minute();
    field Integer selfTimeHMSecond <= self.timeHM.second();
    field Integer selfTimeHMMillisecond <= self.timeHM.millisecond();
    field Integer selfTimeHMAsMillisecond <= self.timeHM.asMilliseconds();

    field String selfTimeHMSAsString <= self.timeHMS.asString();
    field Integer selfTimeHMSHour <= self.timeHMS.hour();
    field Integer selfTimeHMSMinute <= self.timeHMS.minute();
    field Integer selfTimeHMSSecond <= self.timeHMS.second();
    field Integer selfTimeHMSMillisecond <= self.timeHMS.millisecond();
    field Integer selfTimeHMSAsMillisecond <= self.timeHMS.asMilliseconds();

    field String selfTimeHMSFAsString <= self.timeHMSF.asString();
    field Integer selfTimeHMSFHour <= self.timeHMSF.hour();
    field Integer selfTimeHMSFMinute <= self.timeHMSF.minute();
    field Integer selfTimeHMSFSecond <= self.timeHMSF.second();
    field Integer selfTimeHMSFMillisecond <= self.timeHMSF.millisecond();
    field Integer selfTimeHMSFAsMillisecond <= self.timeHMSF.asMilliseconds();

    // undefined
    field String selfUndefinedTimeAsString <= self.undefinedTime.asString();
    field Integer selfUndefinedTimeHour <= self.undefinedTime.hour();
    field Integer selfUndefinedTimeMinute <= self.undefinedTime.minute();
    field Integer selfUndefinedTimeSecond <= self.undefinedTime.second();
    field Integer selfUndefinedTimeMillisecond <= self.undefinedTime.millisecond();
    field Integer selfUndefinedTimeAsMillisecond <= self.undefinedTime.asMilliseconds();

    // constant
    field String timeConstantHMAsString <= `12:34`.asString();
    field Integer timeConstantHMHour <= `12:34`.hour();
    field Integer timeConstantHMMinute <= `12:34`.minute();
    field Integer timeConstantHMSecond <= `12:34`.second();
    field Integer timeConstantHMMillisecond <= `12:34`.millisecond();
    field Integer timeConstantHMAsMillisecond <= `12:34`.asMilliseconds();

    field String timeConstantHMSAsString <= `12:34:56`.asString();
    field Integer timeConstantHMSHour <= `12:34:56`.hour();
    field Integer timeConstantHMSMinute <= `12:34:56`.minute();
    field Integer timeConstantHMSSecond <= `12:34:56`.second();
    field Integer timeConstantHMSMillisecond <= `12:34:56`.millisecond();
    field Integer timeConstantHMSAsMillisecond <= `12:34:56`.asMilliseconds();

    field String timeConstantHMSFAsString <= `12:34:56.789`.asString();
    field Integer timeConstantHMSFHour <= `12:34:56.789`.hour();
    field Integer timeConstantHMSFMinute <= `12:34:56.789`.minute();
    field Integer timeConstantHMSFSecond <= `12:34:56.789`.second();
    field Integer timeConstantHMSFMillisecond <= `12:34:56.789`.millisecond();
    field Integer timeConstantHMSFAsMillisecond <= `12:34:56.789`.asMilliseconds();

    // from millisecond
    field Time timeFromMillisecondOfUndefined <= Time.fromMilliseconds(milliseconds = self.undefinedNumber);
    field Time timeFromMillisecondOfSelfNumber <= Time.fromMilliseconds(milliseconds = self.number);
    field Time timeFromMillisecondOfConstant <= Time.fromMilliseconds(milliseconds = 999999);

}

transfer TransferTimeFunctions (TimeFunctions mapped) {
    field Time timeHM <= mapped.timeHM update:auto;
    field Time timeHM1 <= mapped.timeHM1 update:auto;
    field Time timeHMS <= mapped.timeHMS update:auto;
    field Time timeHMS1 <= mapped.timeHMS1 update:auto;
    field Time timeHMSF <= mapped.timeHMSF update:auto;
    field Time timeHMSF1 <= mapped.timeHMSF1 update:auto;
    field Time timeHMSF2 <= mapped.timeHMSF2 update:auto;

    field Time undefinedTime <= mapped.undefinedTime update:auto;
    field Integer undefinedNumber <= mapped.undefinedNumber update:auto;
    field Integer number <= mapped.number update:auto;

    // self
    field String selfTimeHMAsString <= mapped.selfTimeHMAsString;
    field Integer selfTimeHMHour <= mapped.selfTimeHMHour;
    field Integer selfTimeHMMinute <= mapped.selfTimeHMMinute;
    field Integer selfTimeHMSecond <= mapped.selfTimeHMSecond;
    field Integer selfTimeHMMillisecond <= mapped.selfTimeHMMillisecond;
    field Integer selfTimeHMAsMillisecond <= mapped.selfTimeHMAsMillisecond;

    field String selfTimeHMSAsString <= mapped.selfTimeHMSAsString;
    field Integer selfTimeHMSHour <= mapped.selfTimeHMSHour;
    field Integer selfTimeHMSMinute <= mapped.selfTimeHMSMinute;
    field Integer selfTimeHMSSecond <= mapped.selfTimeHMSSecond;
    field Integer selfTimeHMSMillisecond <= mapped.selfTimeHMSMillisecond;
    field Integer selfTimeHMSAsMillisecond <= mapped.selfTimeHMSAsMillisecond;

    field String selfTimeHMSFAsString <= mapped.selfTimeHMSFAsString;
    field Integer selfTimeHMSFHour <= mapped.selfTimeHMSFHour;
    field Integer selfTimeHMSFMinute <= mapped.selfTimeHMSFMinute;
    field Integer selfTimeHMSFSecond <= mapped.selfTimeHMSFSecond;
    field Integer selfTimeHMSFMillisecond <= mapped.selfTimeHMSFMillisecond;
    field Integer selfTimeHMSFAsMillisecond <= mapped.selfTimeHMSFAsMillisecond;

    // undefined
    field String selfUndefinedTimeAsString <= mapped.selfUndefinedTimeAsString;
    field Integer selfUndefinedTimeHour <= mapped.selfUndefinedTimeHour;
    field Integer selfUndefinedTimeMinute <= mapped.selfUndefinedTimeMinute;
    field Integer selfUndefinedTimeSecond <= mapped.selfUndefinedTimeSecond;
    field Integer selfUndefinedTimeMillisecond <= mapped.selfUndefinedTimeMillisecond;
    field Integer selfUndefinedTimeAsMillisecond <= mapped.selfUndefinedTimeAsMillisecond;

    // constant
    field String timeConstantHMAsString <= mapped.timeConstantHMAsString;
    field Integer timeConstantHMHour <= mapped.timeConstantHMHour;
    field Integer timeConstantHMMinute <= mapped.timeConstantHMMinute;
    field Integer timeConstantHMSecond <= mapped.timeConstantHMSecond;
    field Integer timeConstantHMMillisecond <= mapped.timeConstantHMMillisecond;
    field Integer timeConstantHMAsMillisecond <= mapped.timeConstantHMAsMillisecond;

    field String timeConstantHMSAsString <= mapped.timeConstantHMSAsString;
    field Integer timeConstantHMSHour <= mapped.timeConstantHMSHour;
    field Integer timeConstantHMSMinute <= mapped.timeConstantHMSMinute;
    field Integer timeConstantHMSSecond <= mapped.timeConstantHMSSecond;
    field Integer timeConstantHMSMillisecond <= mapped.timeConstantHMSMillisecond;
    field Integer timeConstantHMSAsMillisecond <= mapped.timeConstantHMSAsMillisecond;

    field String timeConstantHMSFAsString <= mapped.timeConstantHMSFAsString;
    field Integer timeConstantHMSFHour <= mapped.timeConstantHMSFHour;
    field Integer timeConstantHMSFMinute <= mapped.timeConstantHMSFMinute;
    field Integer timeConstantHMSFSecond <= mapped.timeConstantHMSFSecond;
    field Integer timeConstantHMSFMillisecond <= mapped.timeConstantHMSFMillisecond;
    field Integer timeConstantHMSFAsMillisecond <= mapped.timeConstantHMSFAsMillisecond;

    // from millisecond
    field Time timeFromMillisecondOfUndefined <= mapped.timeFromMillisecondOfUndefined;
    field Time timeFromMillisecondOfSelfNumber <= mapped.timeFromMillisecondOfSelfNumber;
    field Time timeFromMillisecondOfConstant <= mapped.timeFromMillisecondOfConstant;

}

entity TimestampFunctions {
    field Timestamp timestamp1 default:`2019-07-18T01:11:12+02:00`;
    field Timestamp timestamp2 default:`2019-07-18T01:11:12Z`;

    field Timestamp timestampOfDate <= Timestamp.of(date = `2022-09-29`);
    field Timestamp timestampOfDateAndTime <= Timestamp.of(date = `2022-09-29`, time = `11:11:11`);

    field Date dateOfTimestampWithDate <= Timestamp.of(date = `2022-09-29`).date();
    field Date dateOfTimestampWithDateAndTime <= Timestamp.of(date = `2022-09-29`, time = `11:11:11`).date();
    field Date dateOfTimestampSelf <= self.timestamp2.date();
    field Time timeOfTimestampWithDate <= Timestamp.of(date = `2022-09-29`).time();
    field Time timeOfTimestampWithDateAndTime <= Timestamp.of(date = `2022-09-29`, time =`11:11:11`).time();
    field Time timeOfTimestampSelf <= self.timestamp2.time();

    field Integer asMilliseconds <= Timestamp.of(date = `2022-09-29`).asMilliseconds();
    field Integer asMilliseconds2 <= Timestamp.of(date = `2022-09-29`, time = `11:11:11`).asMilliseconds();

    field Timestamp fromMilliseconds <= Timestamp.fromMilliseconds(milliseconds = 1664449871000);

    field Timestamp plusAll <= Timestamp.of(date = `2022-09-29`, time = `11:11:11`).plus(years = 1, months = 1, days = 1, hours = 1, minutes = 1, seconds = 1, milliseconds = 1);
    field Timestamp plusDate <= Timestamp.of(date = `2022-09-29`, time = `11:11:11`).plus(years = 1, months = 1, days = 1);

    field Timestamp plusAllReversed <= Timestamp.of(date = `2022-09-29`, time = `11:11:11`).plus(milliseconds = 1, seconds = 1, hours = 1, days = 1, months = 1, minutes = 1, years = 1);
    field Timestamp plusDateReversed <= Timestamp.of(date = `2022-09-29`, time = `11:11:11`).plus(days = 1, months = 1, years = 1);

    field Timestamp plusMilliseconds <= Timestamp.of(date = `2022-09-29`, time = `11:11:11`).plus(milliseconds = 1);

    field Timestamp minusAll <= Timestamp.of(date = `2022-09-29`, time = `11:11:11`).plus(years = -1, months = -1, days = -1, hours = -1, minutes = -1, seconds = -1, milliseconds = -1);
    field Timestamp minusDate <= Timestamp.of(date = `2022-09-29`, time = `11:11:11`).plus(years = -1, months = -1, days = -1);

    field Timestamp minusAllReversed <= Timestamp.of(date = `2022-09-29`, time = `11:11:11`).plus(milliseconds = -1, seconds = -1, hours = -1, days = -1, months = -1, minutes = -1, years = -1);
    field Timestamp minusDateReversed <= Timestamp.of(date = `2022-09-29`, time = `11:11:11`).plus(days = -1, months = -1, years = -1);

    field Timestamp minusMilliseconds <= Timestamp.of(date = `2022-09-29`, time = `11:11:11`).plus(milliseconds = -1);
}

transfer TransferTimestampFunctions (TimestampFunctions mapped) {
    field Timestamp timestamp1 <= mapped.timestamp1 update:auto;
    field Timestamp timestamp2 <= mapped.timestamp2 update:auto;

    field Timestamp timestampOfDate <= mapped.timestampOfDate;
    field Timestamp timestampOfDateAndTime <= mapped.timestampOfDateAndTime;

    field Date dateOfTimestampWithDate <= mapped.dateOfTimestampWithDate;
    field Date dateOfTimestampWithDateAndTime <= mapped.dateOfTimestampWithDateAndTime;
    field Date dateOfTimestampSelf <= mapped.dateOfTimestampSelf;
    field Time timeOfTimestampWithDate <= mapped.timeOfTimestampWithDate;
    field Time timeOfTimestampWithDateAndTime <= mapped.timeOfTimestampWithDateAndTime;
    field Time timeOfTimestampSelf <= mapped.timeOfTimestampSelf;

    field Integer asMilliseconds <= mapped.asMilliseconds;
    field Integer asMilliseconds2 <= mapped.asMilliseconds2;

    field Timestamp fromMilliseconds <= mapped.fromMilliseconds;

    field Timestamp plusAll <= mapped.plusAll;
    field Timestamp plusDate <= mapped.plusDate;

    field Timestamp plusAllReversed <= mapped.plusAllReversed;
    field Timestamp plusDateReversed <= mapped.plusDateReversed;

    field Timestamp plusMilliseconds <= mapped.plusMilliseconds;

    field Timestamp minusAll <= mapped.minusAll;
    field Timestamp minusDate <= mapped.minusDate;

    field Timestamp minusAllReversed <= mapped.minusAllReversed;
    field Timestamp minusDateReversed <= mapped.minusDateReversed;

    field Timestamp minusMilliseconds <= mapped.minusMilliseconds;
}

entity TimestampAsString {
    field Timestamp timestamp1 default:`2022-03-03T14:00:00Z`;
    field Timestamp timestamp2 default: `2022-03-03T14:00:00.123Z`;
    field Timestamp timestamp3 default: `2022-03-03T14:00:00+00:03`;
    field Timestamp timestamp4 default: `2022-03-03T14:00:00+03:00`;
    field Timestamp timestamp5 default: `2022-03-03T14:00:00+03:03`;
    field Timestamp timestamp6 default: `2022-03-03T14:00:00-00:03`;
    field Timestamp timestamp7 default: `2022-03-03T14:00:00-03:00`;
    field Timestamp timestamp8 default: `2022-03-03T14:00:00-03:03`;
    field Timestamp timestamp9 default: `2022-03-03T14:00:00.123+00:03`;
    field Timestamp timestamp10 default: `2022-03-03T14:00:00.123+03:00`;
    field Timestamp timestamp12 default: `2022-03-03T14:00:00.123+03:03`;
    field Timestamp timestamp13 default: `2022-03-03T14:00:00.123-00:03`;
    field Timestamp timestamp14 default: `2022-03-03T14:00:00.123-03:00`;
    field Timestamp timestamp15 default: `2022-03-03T14:00:00.123-03:03`;

    field String timestamp1AsString <= `2022-03-03T14:00:00Z`.asString();
    field String timestamp1AsString1 <= self.timestamp1.asString();
    field String timestamp2AsString <= `2022-03-03T14:00:00.123Z`.asString();
    field String timestamp2AsString1 <= self.timestamp2.asString();
    field String timestamp3AsString <= `2022-03-03T14:00:00+00:03`.asString();
    field String timestamp3AsString1 <= self.timestamp3.asString();
    field String timestamp4AsString <= `2022-03-03T14:00:00+03:00`.asString();
    field String timestamp4AsString1 <= self.timestamp4.asString();
    field String timestamp5AsString <= `2022-03-03T14:00:00+03:03`.asString();
    field String timestamp5AsString1 <= self.timestamp5.asString();
    field String timestamp6AsString <= `2022-03-03T14:00:00-00:03`.asString();
    field String timestamp6AsString1 <= self.timestamp6.asString();
    field String timestamp7AsString <= `2022-03-03T14:00:00-03:00`.asString();
    field String timestamp7AsString1 <= self.timestamp7.asString();
    field String timestamp8AsString <= `2022-03-03T14:00:00-03:03`.asString();
    field String timestamp8AsString1 <= self.timestamp8.asString();
    field String timestamp9AsString <= `2022-03-03T14:00:00.123+00:03`.asString();
    field String timestamp9AsString1 <= self.timestamp9.asString();
    field String timestamp10AsString <= `2022-03-03T14:00:00.123+03:00`.asString();
    field String timestamp10AsString1 <= self.timestamp10.asString();
    field String timestamp12AsString <= `2022-03-03T14:00:00.123+03:03`.asString();
    field String timestamp12AsString1 <= self.timestamp12.asString();
    field String timestamp13AsString <= `2022-03-03T14:00:00.123-00:03`.asString();
    field String timestamp13AsString1 <= self.timestamp13.asString();
    field String timestamp14AsString <= `2022-03-03T14:00:00.123-03:00`.asString();
    field String timestamp14AsString1 <= self.timestamp14.asString();
    field String timestamp15AsString <= `2022-03-03T14:00:00.123-03:03`.asString();
    field String timestamp15AsString1 <= self.timestamp15.asString();

    field Timestamp timestampOfDate default:Timestamp.of(date = `2022-09-29`);
    field String timestampOfDateAsString <= Timestamp.of(date = `2022-09-29`).asString();
    field String timestampOfDateAsString1 <= self.timestampOfDate.asString();

    field Timestamp timestampOfDateAndTime default:Timestamp.of(date = `2022-09-29`, time = `11:11:11`);
    field String timestampOfDateAndTimeAsString <= Timestamp.of(date = `2022-09-29`, time = `11:11:11`).asString();
    field String timestampOfDateAndTimeAsString1 <= self.timestampOfDateAndTime.asString();

    field Timestamp fromMilliseconds default:Timestamp.fromMilliseconds(milliseconds = 1664449871000);
    field String fromMillisecondsAsString <= Timestamp.fromMilliseconds(milliseconds = 1664449871000).asString();
    field String fromMillisecondsAsString1 <= self.fromMilliseconds.asString();
}

transfer TransferTimestampAsString (TimestampAsString mapped) {
    field Timestamp timestamp1 <= mapped.timestamp1 update:auto;
    field Timestamp timestamp2 <= mapped.timestamp2 update:auto;
    field Timestamp timestamp3 <= mapped.timestamp3 update:auto;
    field Timestamp timestamp4 <= mapped.timestamp4 update:auto;
    field Timestamp timestamp5 <= mapped.timestamp5 update:auto;
    field Timestamp timestamp6 <= mapped.timestamp6 update:auto;
    field Timestamp timestamp7 <= mapped.timestamp7 update:auto;
    field Timestamp timestamp8 <= mapped.timestamp8 update:auto;
    field Timestamp timestamp9 <= mapped.timestamp9 update:auto;
    field Timestamp timestamp10 <= mapped.timestamp10 update:auto;
    field Timestamp timestamp12 <= mapped.timestamp12 update:auto;
    field Timestamp timestamp13 <= mapped.timestamp13 update:auto;
    field Timestamp timestamp14 <= mapped.timestamp14 update:auto;
    field Timestamp timestamp15 <= mapped.timestamp15 update:auto;

    field String timestamp1AsString <= mapped.timestamp1AsString;
    field String timestamp1AsString1 <= mapped.timestamp1AsString1;
    field String timestamp2AsString <= mapped.timestamp2AsString;
    field String timestamp2AsString1 <= mapped.timestamp2AsString1;
    field String timestamp3AsString <= mapped.timestamp3AsString;
    field String timestamp3AsString1 <= mapped.timestamp3AsString1;
    field String timestamp4AsString <= mapped.timestamp4AsString;
    field String timestamp4AsString1 <= mapped.timestamp4AsString1;
    field String timestamp5AsString <= mapped.timestamp5AsString;
    field String timestamp5AsString1 <= mapped.timestamp5AsString1;
    field String timestamp6AsString <= mapped.timestamp6AsString;
    field String timestamp6AsString1 <= mapped.timestamp6AsString1;
    field String timestamp7AsString <= mapped.timestamp7AsString;
    field String timestamp7AsString1 <= mapped.timestamp7AsString1;
    field String timestamp8AsString <= mapped.timestamp8AsString;
    field String timestamp8AsString1 <= mapped.timestamp8AsString1;
    field String timestamp9AsString <= mapped.timestamp9AsString;
    field String timestamp9AsString1 <= mapped.timestamp9AsString1;
    field String timestamp10AsString <= mapped.timestamp10AsString;
    field String timestamp10AsString1 <= mapped.timestamp10AsString1;
    field String timestamp12AsString <= mapped.timestamp12AsString;
    field String timestamp12AsString1 <= mapped.timestamp12AsString1;
    field String timestamp13AsString <= mapped.timestamp13AsString;
    field String timestamp13AsString1 <= mapped.timestamp13AsString1;
    field String timestamp14AsString <= mapped.timestamp14AsString;
    field String timestamp14AsString1 <= mapped.timestamp14AsString1;
    field String timestamp15AsString <= mapped.timestamp15AsString;
    field String timestamp15AsString1 <= mapped.timestamp15AsString1;

    field Timestamp timestampOfDate <= mapped.timestampOfDate update:auto;
    field String timestampOfDateAsString <= mapped.timestampOfDateAsString;
    field String timestampOfDateAsString1 <= mapped.timestampOfDateAsString1;

    field Timestamp timestampOfDateAndTime <= mapped.timestampOfDateAndTime update:auto;
    field String timestampOfDateAndTimeAsString <= mapped.timestampOfDateAndTimeAsString;
    field String timestampOfDateAndTimeAsString1 <= mapped.timestampOfDateAndTimeAsString1;

    field Timestamp fromMilliseconds <= mapped.fromMilliseconds update:auto;
    field String fromMillisecondsAsString <= mapped.fromMillisecondsAsString;
    field String fromMillisecondsAsString1 <= mapped.fromMillisecondsAsString1;
}

entity EnumFunctions {
    field MyEnum `enum` default: MyEnum#Atomic;

    field String ownEnumAsString <= self.`enum`.asString();
    field String enumAsString <= (MyEnum#Atomic).asString();
}

transfer TransferEnumFunctions (EnumFunctions mapped) {
    field MyEnum `enum` <= mapped.`enum` update:auto;

    field String ownEnumAsString <= mapped.ownEnumAsString;
    field String enumAsString <= mapped.enumAsString;
}

entity InstanceFunctions {
    field String instanceField default:"Hello";
    field FE::ExternalEntity external;
    field Parent parent;
    field Child child;

    relation Parent[] parents;
    relation Child[] children;

    field Boolean typeOfParent <= self.parent.typeOf(entityType = Parent);
    field Boolean notTypeOfChild <= self.parent.typeOf(entityType = Child);

    field Boolean kindOfParent <= self.parent.kindOf(entityType = Parent);
    field Boolean kindOfChild <= self.parent.kindOf(entityType = Child);

    relation Parent asParentType <= self.child;
    relation Child asChildType <= self.parent.asType(entityType = Child);

    field Boolean parentMemberOfParents <= self.parent.memberOf(instances = self.parents);
    field Boolean parentMemberOfParentsExtra <= self.parent.memberOf(instances = self.parents.filter(p | p.memberOf(instances = Parent.all())));
    field Boolean parentMemberOfChildren <= self.parent.memberOf(instances = self.children);
    field Boolean childMemberOfParents <= self.child.memberOf(instances = self.parents);
    field Boolean childMemberOfChildren <= self.child.memberOf(instances = self.children);

	field Integer navigationWithCalls <= self.parents.any().name.size();
}

transfer TransferInstanceFunctions (InstanceFunctions mapped){
    field String instanceField <= mapped.instanceField update:auto;

    relation FE::TransferExternalEntity external <= mapped.external eager:true;
    relation TransferParent parent <= mapped.parent eager:true create:true;
    relation TransferChild child <= mapped.child eager:true create:true;

    relation TransferParent[] parents <= mapped.parents choices:Parent.all();
    relation TransferChild[] children <= mapped.children choices:Child.all();

    field Boolean typeOfParent <= mapped.typeOfParent;
    field Boolean notTypeOfChild <= mapped.notTypeOfChild;

    field Boolean kindOfParent <= mapped.kindOfParent;
    field Boolean kindOfChild <= mapped.kindOfChild;

    relation TransferParent asParentType <= mapped.asParentType;
    relation TransferChild asChildType <= mapped.asChildType;

    field Boolean parentMemberOfParents <= mapped.parentMemberOfParents;
    field Boolean parentMemberOfParentsExtra <= mapped.parentMemberOfParentsExtra;
    field Boolean parentMemberOfChildren <= mapped.parentMemberOfChildren;
    field Boolean childMemberOfParents <= mapped.childMemberOfParents;
    field Boolean childMemberOfChildren <= mapped.childMemberOfChildren;

	field Integer navigationWithCalls <= mapped.navigationWithCalls;
}

entity Booler {
    field Boolean b;
}

transfer TransferBooler (Booler mapped) {
    field Boolean b <= mapped.b update:auto;
}

entity BoolerTester {
    field Boolean anyTrue <= Booler.all().anyTrue(b | b.b);
    field Boolean allTrue <= Booler.all().allTrue(b | b.b);
    field Boolean anyFalse <= Booler.all().anyFalse(b | b.b);
    field Boolean allFalse <= Booler.all().allFalse(b | b.b);
}

transfer TransferBoolerTester (BoolerTester mapped) {
    field Boolean anyTrue <= mapped.anyTrue;
    field Boolean allTrue <= mapped.allTrue;
    field Boolean anyFalse <= mapped.anyFalse;
    field Boolean allFalse <= mapped.allFalse;
}

entity CollectionFunctions {
    field Parent[] parentsField;
    field Child[] childrenField;

    relation Parent[] parentsRelation;
    relation Child[] childrenRelation;

    relation Parent anyParentsField <= self.parentsField.any();
    relation Parent anyParentsRelation <= self.parentsRelation.any();

    field Integer sizeParentsField <= self.parentsField.size();
    field Integer sizeParentsRelation <= self.parentsRelation.size();

    relation Parent[] asCollectionChildrenParentField <= self.parentsField.asCollection(entityType = Parent);
    relation Parent[] asCollectionChildrenParentRelation <= self.parentsRelation.asCollection(entityType = Parent);
    relation Child[] asCollectionChildrenChildField <= self.parentsField.asCollection(entityType = Child);
    relation Child[] asCollectionChildrenChildRelation <= self.parentsRelation.asCollection(entityType = Child);

    field Boolean containsParent <= self.parentsField.contains(instance = Parent.all().filter(p | p.name == "John").any());

    relation Parent[] filterParentsField <= self.parentsField.filter(p | p.name == "John");
    relation Parent[] filterParentsRelation <= self.parentsRelation.filter(p | p.name == "Mark");
    relation Child[] filterChildrenField <= self.childrenField.filter(p | p.name == "Cindy");
    relation Child[] filterChildrenRelation <= self.childrenRelation.filter(p | p.name == "Anna");

    field Boolean anyTrueChildrenField <= self.childrenField.anyTrue(p | p.age  > 40);
    field Boolean anyTrueChildrenRelation <= self.childrenRelation.anyTrue(p | p.age  > 40);

    field Boolean allTrueChildrenField <= self.childrenField.allTrue(p | p.age  > 16);
    field Boolean allTrueChildrenRelation <= self.childrenRelation.allTrue(p | p.age  > 16);

    field Boolean anyFalseChildrenField <= self.childrenField.anyFalse(p | p.age  > 16);
    field Boolean anyFalseChildrenRelation <= self.childrenRelation.anyFalse(p | p.age  > 16);

    field Boolean allFalseChildrenField <= self.childrenField.allFalse(p | p.age  > 16);
    field Boolean allFalseChildrenRelation <= self.childrenRelation.allFalse(p | p.age  < 2);

    field Integer minChildrenField <= self.childrenField.min(f | f.age);
    field Integer minChildrenRelation <= self.childrenRelation.min(f | f.age);

    field Integer maxChildrenField <= self.childrenField.max(f | f.age);
    field Integer maxChildrenRelation <= self.childrenRelation.max(f | f.age);

    field Integer sumChildrenField <= self.childrenField.sum(f | f.age);
    field Integer sumChildrenRelation <= self.childrenRelation.sum(f | f.age);

    field Integer avgChildrenField <= self.childrenField.avg(f | f.age);
    field Integer avgChildrenRelation <= self.childrenRelation.avg(f | f.age);
    field Scaled avgScaledChildrenField <= self.childrenField.avg(f | f.age);
    field Scaled avgScaledChildrenRelation <= self.childrenRelation.avg(f | f.age);
    field Integer divisionConst <= 69 / 2;
    field Integer roundConst <= (69 / 2).round();

    relation Child[] firstChildrenField <= self.childrenField.first(f | f.age);
    relation Child[] firstChildrenRelation <= self.childrenRelation.first(f | f.age);

    relation Child[] lastChildrenField <= self.childrenField.last(f | f.age);
    relation Child[] lastChildrenRelation <= self.childrenRelation.last(f | f.age);

    relation Child[] frontChildrenField <= self.childrenField.front(f | f.age);
    relation Child[] frontChildrenRelation <= self.childrenRelation.front(f | f.age);

    relation Child[] backChildrenField <= self.childrenField.back(f | f.age);
    relation Child[] backChildrenRelation <= self.childrenRelation.back(f | f.age);

}

transfer TransferCollectionFunctions (CollectionFunctions mapped) {
    relation TransferParent[] parentsField <= mapped.parentsField eager:true create:true;
    relation TransferChild[] childrenField <= mapped.childrenField eager:true create:true;

    relation TransferParent[] parentsRelation <= mapped.parentsRelation choices:Parent.all();
    relation TransferChild[] childrenRelation <= mapped.childrenRelation choices:Child.all();

    relation TransferParent anyParentsField <= mapped.anyParentsField;
    relation TransferParent anyParentsRelation <= mapped.anyParentsRelation;

    field Integer sizeParentsField <= mapped.sizeParentsField;
    field Integer sizeParentsRelation <= mapped.sizeParentsRelation;

    relation TransferParent[] asCollectionChildrenParentField <= mapped.asCollectionChildrenParentField;
    relation TransferParent[] asCollectionChildrenParentRelation <= mapped.asCollectionChildrenParentRelation;
    relation TransferChild[] asCollectionChildrenChildField <= mapped.asCollectionChildrenChildField;
    relation TransferChild[] asCollectionChildrenChildRelation <= mapped.asCollectionChildrenChildRelation;

    field Boolean containsParent <= mapped.containsParent;

    relation TransferParent[] filterParentsField <= mapped.filterParentsField;
    relation TransferParent[] filterParentsRelation <= mapped.filterParentsRelation;
    relation TransferChild[] filterChildrenField <= mapped.filterChildrenField;
    relation TransferChild[] filterChildrenRelation <= mapped.filterChildrenRelation;

    field Boolean anyTrueChildrenField <= mapped.anyTrueChildrenField;
    field Boolean anyTrueChildrenRelation <= mapped.anyTrueChildrenRelation;

    field Boolean allTrueChildrenField <= mapped.allTrueChildrenField;
    field Boolean allTrueChildrenRelation <= mapped.allTrueChildrenRelation;

    field Boolean anyFalseChildrenField <= mapped.anyFalseChildrenField;
    field Boolean anyFalseChildrenRelation <= mapped.anyFalseChildrenRelation;

    field Boolean allFalseChildrenField <= mapped.allFalseChildrenField;
    field Boolean allFalseChildrenRelation <= mapped.allFalseChildrenRelation;

    field Integer minChildrenField <= mapped.minChildrenField;
    field Integer minChildrenRelation <= mapped.minChildrenRelation;

    field Integer maxChildrenField <= mapped.maxChildrenField;
    field Integer maxChildrenRelation <= mapped.maxChildrenRelation;

    field Integer sumChildrenField <= mapped.sumChildrenField;
    field Integer sumChildrenRelation <= mapped.sumChildrenRelation;

    field Integer avgChildrenField <= mapped.avgChildrenField;
    field Integer avgChildrenRelation <= mapped.avgChildrenRelation;
    field Scaled avgScaledChildrenField <= mapped.avgScaledChildrenField;
    field Scaled avgScaledChildrenRelation <= mapped.avgScaledChildrenRelation;
    field Integer divisionConst <= mapped.divisionConst;
    field Integer roundConst <= mapped.roundConst;

    relation TransferChild[] firstChildrenField <= mapped.firstChildrenField;
    relation TransferChild[] firstChildrenRelation <= mapped.firstChildrenRelation;

    relation TransferChild[] lastChildrenField <= mapped.lastChildrenField;
    relation TransferChild[] lastChildrenRelation <= mapped.lastChildrenRelation;

    relation TransferChild[] frontChildrenField <= mapped.frontChildrenField;
    relation TransferChild[] frontChildrenRelation <= mapped.frontChildrenRelation;

    relation TransferChild[] backChildrenField <= mapped.backChildrenField;
    relation TransferChild[] backChildrenRelation <= mapped.backChildrenRelation;

}

entity Parent {
    field String name;
}

transfer TransferParent (Parent mapped){
    field String name <= mapped.name update:auto;
    
    event create eventCreate();
}

entity Child extends Parent {
    field Integer age;
    relation Parent mother;
}

transfer TransferChild (Child mapped) {
    field String name <= mapped.name update:auto;
    field Integer age <= mapped.age update:auto;
    relation TransferParent mother <= mapped.mother choices:Parent.all();
    
    event create eventCreate();
}

entity ExternalChild extends FE::ExternalEntity {
    field Integer age;
}

transfer TransferExternalChild (ExternalChild mapped) {
    field String name <= mapped.name update:auto;
    field Integer age <= mapped.age update:auto;

}

entity Member {
    field String name;
}

transfer TransferMember (Member mapped){
    field String name <= mapped.name update:auto;
}

entity Tester {
    relation Member member;
    relation Member[] members;

    field Boolean memberMemberOfMembers <= self.member.memberOf(instances = self.members);
}

transfer TransferTester (Tester mapped) {
    relation TransferMember member <= mapped.member choices:Member.all();
    relation TransferMember[] members <= mapped.members choices:Member.all();

    field Boolean memberMemberOfMembers <= mapped.memberMemberOfMembers;
}
