model Operators;

type numeric Integer precision:3 scale:0;
type numeric BigInteger precision:10 scale:0;
type numeric Scaled precision:6 scale:3;
type string String min-size:0 max-size:128;
type boolean Boolean;
type date Date;
type timestamp Timestamp;
type time Time;
type binary Binary mime-type:["text/plain"] max-file-size: 1 GB ;

enum TestLiteral {
    Aaa01 = 1;
    Bbb02 = 2;
    Ccc03 = 9999;
    ZZ00  = 0;
}

entity DefaultOperators {
    field Integer rounded default:1.23.round();
    field Integer unary default:-1 -(-1 + -2) + (11-19); // -6
    field Integer abs default:-2.abs();
    field Integer addition default:5 + 2;
    field Integer subtraction default:5 - 2;
    field Integer pow default:5 ^ 2;
    field Integer multiplication default:5 * 2;
    field Scaled division default:5 / 2;
    field Integer divisionWhole default:5 div 2;
    field Integer modulo default:5 mod 2;
    field Boolean lt default:5 < 5;
    field Boolean lt2 default:2 < 5;
    field Boolean gt default:5 > 5;
    field Boolean gt2 default:5 > 2;
    field Boolean lte default:5 <= 5;
    field Boolean lte2 default:2 <= 5;
    field Boolean gte default:5 >= 5;
    field Boolean gte2 default:5 >= 2;
    field Boolean eq default:5 == 2;
    field Boolean neq default:5 != 2;
    field Integer conditional default:5 > 2 ? 1 : 2;
    field Boolean groupAnd default:(5 - 2 < 2 and 5 + 2 > 2);
    field Boolean groupOr default:(5 - 2 > 2 or 5 + 2 < 2);

    field Integer oneModOne default:1 mod 1;
    field Scaled oneModOnePointNine default:1 mod 1.9;
    field Scaled onePointNineModOnePointNine default:1.9 mod 1.9;
    field Scaled onePointNineModOne default:1.9 mod 1;
    field Integer oneDivOne default:1 div 1;
    field Scaled oneDivOnePointNine default:1 div 1.9;
    field Scaled onePointNineDivOnePointNine default:1.9 div 1.9;
    field Scaled onePointNineDivOne default:1.9 div 1;

    field Boolean dateLt default:`2022-07-07` < `2022-07-08`;
    field Boolean dateLte default:`2022-07-07` <= `2022-07-07`;
    field Boolean dateLte2 default:`2022-07-07` <= `2022-07-08`;
    field Boolean dateGt default:`2022-07-09` > `2022-07-08`;
    field Boolean dateGte default:`2022-07-08` >= `2022-07-08`;
    field Boolean dateGte2 default:`2022-07-09` >= `2022-07-08`;
    field Boolean dateEq default:`2022-07-09` == `2022-07-09`;
    field Boolean dateNeq default:`2022-07-10` != `2022-07-09`;

    field Boolean timeLt default:`11:29` < `11:30`;
    field Boolean timeLte default:`11:30` <= `11:30`;
    field Boolean timeLte2 default:`11:29` <= `11:30`;
    field Boolean timeGt default:`11:30` > `11:29`;
    field Boolean timeGte default:`11:29` >= `11:29`;
    field Boolean timeGte2 default:`11:30` >= `11:29`;
    field Boolean timeEq default:`11:30` == `11:30`;
    field Boolean timeNeq default:`11:30` != `11:29`;

    field Boolean timestampEq default:`2020-02-18T09:11:12Z` == `2020-02-18T10:11:12+01:00`;
    field Boolean timestampNeq default:`2020-02-18T10:11:12Z` != `2020-02-18T00:00:00Z`;

    field Boolean stringLt default:"abc" < "bcd";
    field Boolean stringLte default:"abc" <= "abc";
    field Boolean stringLte2 default:"abc" <= "bcd";
    field Boolean stringGt default:"abc" > "ab";
    field Boolean stringGte default:"abc" >= "abc";
    field Boolean stringGte2 default:"abc" >= "ab";
    field Boolean stringEq default:"abc" == "abc";
    field Boolean stringNeq default:"abc" != "ab";

    field Boolean csStringLt default:"aBc" < "abc";
    field Boolean csStringLte default:"aBc" <= "aBc";
    field Boolean csStringLte2 default:"aBc" <= "abc";
    field Boolean csStringGt default:"abc" > "aBc";
    field Boolean csStringGte default:"aBc" >= "aBc";
    field Boolean csStringGte2 default:"abc" >= "aBc";
    field Boolean csStringEq default:"ABC" == "ABC";
    field Boolean csStringEqFalse default:"ABC" == "abc";
    field Boolean csStringNeq default:"ABC" != "abc";
}

transfer TransferDefaultOperators (DefaultOperators mapped) {
    field Integer rounded <=> mapped.rounded;
    field Integer unary <=> mapped.unary; // -6
    field Integer abs <=> mapped.abs;
    field Integer addition <=> mapped.addition;
    field Integer subtraction <=> mapped.subtraction;
    field Integer pow <=> mapped.pow;
    field Integer multiplication <=> mapped.multiplication;
    field Scaled division <=> mapped.division;
    field Integer divisionWhole <=> mapped.divisionWhole;
    field Integer modulo <=> mapped.modulo;
    field Boolean lt <=> mapped.lt;
    field Boolean lt2 <=> mapped.lt2;
    field Boolean gt <=> mapped.gt;
    field Boolean gt2 <=> mapped.gt2;
    field Boolean lte <=> mapped.lte;
    field Boolean lte2 <=> mapped.lte2;
    field Boolean gte <=> mapped.gte;
    field Boolean gte2 <=> mapped.gte2;
    field Boolean eq <=> mapped.eq;
    field Boolean neq <=> mapped.neq;
    field Integer conditional <=> mapped.conditional;
    field Boolean groupAnd <=> mapped.groupAnd;
    field Boolean groupOr <=> mapped.groupOr;

    field Integer oneModOne <=> mapped.oneModOne;
    field Scaled oneModOnePointNine <=> mapped.oneModOnePointNine;
    field Scaled onePointNineModOnePointNine <=> mapped.onePointNineModOnePointNine;
    field Scaled onePointNineModOne <=> mapped.onePointNineModOne;
    field Integer oneDivOne <=> mapped.oneDivOne;
    field Scaled oneDivOnePointNine <=> mapped.oneDivOnePointNine;
    field Scaled onePointNineDivOnePointNine <=> mapped.onePointNineDivOnePointNine;
    field Scaled onePointNineDivOne <=> mapped.onePointNineDivOne;

    field Boolean dateLt <=> mapped.dateLt;
    field Boolean dateLte <=> mapped.dateLte;
    field Boolean dateLte2 <=> mapped.dateLte2;
    field Boolean dateGt <=> mapped.dateGt;
    field Boolean dateGte <=> mapped.dateGte;
    field Boolean dateGte2 <=> mapped.dateGte2;
    field Boolean dateEq <=> mapped.dateEq;
    field Boolean dateNeq <=> mapped.dateNeq;

    field Boolean timeLt <=> mapped.timeLt;
    field Boolean timeLte <=> mapped.timeLte;
    field Boolean timeLte2 <=> mapped.timeLte2;
    field Boolean timeGt <=> mapped.timeGt;
    field Boolean timeGte <=> mapped.timeGte;
    field Boolean timeGte2 <=> mapped.timeGte2;
    field Boolean timeEq <=> mapped.timeEq;
    field Boolean timeNeq <=> mapped.timeNeq;

    field Boolean timestampEq <=> mapped.timestampEq;
    field Boolean timestampNeq <=> mapped.timestampNeq;

    field Boolean stringLt <=> mapped.stringLt;
    field Boolean stringLte <=> mapped.stringLte;
    field Boolean stringLte2 <=> mapped.stringLte2;
    field Boolean stringGt <=> mapped.stringGt;
    field Boolean stringGte <=> mapped.stringGte;
    field Boolean stringGte2 <=> mapped.stringGte2;
    field Boolean stringEq <=> mapped.stringEq;
    field Boolean stringNeq <=> mapped.stringNeq;

    field Boolean csStringLt <=> mapped.csStringLt;
    field Boolean csStringLte <=> mapped.csStringLte;
    field Boolean csStringLte2 <=> mapped.csStringLte2;
    field Boolean csStringGt <=> mapped.csStringGt;
    field Boolean csStringGte <=> mapped.csStringGte;
    field Boolean csStringGte2 <=> mapped.csStringGte2;
    field Boolean csStringEq <=> mapped.csStringEq;
    field Boolean csStringEqFalse <=> mapped.csStringEqFalse;
    field Boolean csStringNeq <=> mapped.csStringNeq;
}


entity DerivedSource {
    field String firstName default:"John";
    field String lastName default:"Pro";
    field Integer age default:35;
    field Scaled score default:98.75;
}

transfer TransferDerivedSource (DerivedSource mapped) {
    field String firstName <=> mapped.firstName;
    field String lastName <=> mapped.lastName;
    field Integer age <=> mapped.age;
    field Scaled score <=> mapped.score;
    event create eventCreate;
}


entity DerivedOperators {
    field DerivedSource source required;
    field DerivedSource undefined;
    field String stringConcat <= self.source.firstName + " " + self.source.lastName;
    field Integer firstNameLength <= self.source.firstName.size();
    field Integer rounded <= self.source.score.round();
    field Integer addition <= self.source.age + 2;
    field Boolean additionTrue <= (self.source.age + 2).isDefined();
    field Boolean additionFalse <= (self.source.age + 2).isUndefined();
    field Boolean additionUndefinedFalse <= (self.undefined.age + 2).isDefined();
    field Boolean additionUndefinedTrue <= (self.undefined.age + 2).isUndefined();
    field Integer subtraction <= self.source.age - 2;
    field BigInteger pow <= self.source.age ^ 2;
    field Integer multiplication <= self.source.age * 2;
    field Integer division <= self.source.age / 2;
    field Integer divisionWhole <= self.source.age div 2;
    field Integer modulo <= self.source.age mod 2;
    field Boolean lt <= self.source.age < 5;
    field Boolean ltTrue <= (self.source.age < 5).isDefined();
    field Boolean ltFalse <= (self.source.age < 5).isUndefined();
    field Boolean ltUndefinedFalse <= (self.undefined.age < 5).isDefined();
    field Boolean ltUndefinedTrue <= (self.undefined.age < 5).isUndefined();
    field Boolean lt2 <= 2 < self.source.age;
    field Boolean gt <= self.source.age > 5;
    field Boolean gt2 <= self.source.age > 2;
    field Boolean lte <= self.source.age <= 5;
    field Boolean lte2 <= 2 <= self.source.age;
    field Boolean gte <= self.source.age >= 5;
    field Boolean gte2 <= self.source.age >= 2;
    field Boolean eq <= self.source.age == 2;
    field Boolean neq <= self.source.age != 2;
    field Integer conditional <= self.source.age > 2 ? 1 : 2;
    field Boolean conditionalTrue <= (self.source.age > 2 ? 1 : 2).isDefined();
    field Boolean conditionalFalse <= (self.source.age > 2 ? 1 : 2).isUndefined();
    field Boolean conditionalUndefinedTrue <= (self.undefined.age > 2 ? 1 : 2).isDefined();
    field Boolean conditionalUndefinedFalse <= (self.undefined.age > 2 ? 1 : 2).isUndefined();
}

transfer TransferDerivedOperators (DerivedOperators mapped) {
    relation TransferDerivedSource source <= mapped.source required eager:true create:true;
    relation TransferDerivedSource undefined <= mapped.undefined eager:true;
    field String stringConcat <= mapped.stringConcat;
    field Integer firstNameLength <= mapped.firstNameLength;
    field Integer rounded <= mapped.rounded;
    field Integer addition <= mapped.addition;
    field Boolean additionTrue <= mapped.additionTrue;
    field Boolean additionFalse <= mapped.additionFalse;
    field Boolean additionUndefinedFalse <= mapped.additionUndefinedFalse;
    field Boolean additionUndefinedTrue <= mapped.additionUndefinedTrue;
    field Integer subtraction <= mapped.subtraction;
    field BigInteger pow <= mapped.pow;
    field Integer multiplication <= mapped.multiplication;
    field Integer division <= mapped.division;
    field Integer divisionWhole <= mapped.divisionWhole;
    field Integer modulo <= mapped.modulo;
    field Boolean lt <= mapped.lt;
    field Boolean ltTrue <= mapped.ltTrue;
    field Boolean ltFalse <= mapped.ltFalse;
    field Boolean ltUndefinedFalse <= mapped.ltUndefinedFalse;
    field Boolean ltUndefinedTrue <= mapped.ltUndefinedTrue;
    field Boolean lt2 <= mapped.lt2;
    field Boolean gt <= mapped.gt;
    field Boolean gt2 <= mapped.gt2;
    field Boolean lte <= mapped.lte;
    field Boolean lte2 <= mapped.lte2;
    field Boolean gte <= mapped.gte;
    field Boolean gte2 <= mapped.gte2;
    field Boolean eq <= mapped.eq;
    field Boolean neq <= mapped.neq;
    field Integer conditional <= mapped.conditional;
    field Boolean conditionalTrue <= mapped.conditionalTrue;
    field Boolean conditionalFalse <= mapped.conditionalFalse;
    field Boolean conditionalUndefinedTrue <= mapped.conditionalUndefinedTrue;
    field Boolean conditionalUndefinedFalse <= mapped.conditionalUndefinedFalse;
}

entity E1 {
    field TestLiteral f1 default:TestLiteral#ZZ00;
    field TestLiteral f2 default:TestLiteral#Aaa01;
    field Boolean f3 <= self.f1 < self.f2;
    field Boolean f4 <= self.f1 <= self.f2;
    field Boolean f5 <= self.f1 > self.f2;
    field Boolean f6 <= self.f1 >= self.f2;
    field Boolean f7 <= self.f1 == self.f2;
    field Boolean f8 <= self.f1 != self.f2;
    field String f9 <= self.f1.asString();
}

transfer TE1 (E1 mapped){
    field TestLiteral f1 <=> mapped.f1;
    field TestLiteral f2  <=> mapped.f2;
    field Boolean f3 <= mapped.f3;
    field Boolean f4 <= mapped.f4;
    field Boolean f5 <= mapped.f5;
    field Boolean f6 <= mapped.f6;
    field Boolean f7 <= mapped.f7;
    field Boolean f8 <= mapped.f8;
    field String f9 <= mapped.f9;
}

query Boolean less( String a, String b ) <= a < b;
query Boolean lessEqual( String a, String b ) <= a <= b;
query Boolean great( String a, String b ) <= a > b;
query Boolean greatEqual( String a, String b ) <= a >= b;
query Boolean equal( String a, String b ) <= a == b;
query Boolean notEqual( String a, String b ) <= a != b;
