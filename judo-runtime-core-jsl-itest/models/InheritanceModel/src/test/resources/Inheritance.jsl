model Inheritance;

import judo::types;

type numeric Scaled precision:9 scale:2;
type string PhoneNumber min-size:0 max-size:32 regex:"^(\\+\\d{1,2}\\s)?\\(?\\d{2,3}\\)?[\\s.-]\\d{3}[\\s.-]\\d{4}$";
type string SmallString min-size:0 max-size:128;

enum MyEnum {
    Atomic = 0;
    Bombastic = 1;
    Crazy = 2;
}

entity ParentA {
    field String nameA;
    identifier String identifierA;
    field String derivedA <= self.nameA;
    relation RelationEntity[] relationEntities;
    field CompositionEntity `entity`;
}

query String queryA(String param) on ParentA <= param;

entity ParentB {
    field String nameB;
}

entity ParentRequiredC {
    field Integer integerAttr required;
    field Scaled scaledAttr required;
    field String stringAttr required;
    field PhoneNumber regexAttr required;
    field Boolean boolAttr required;
    field Date dateAttr required;
    field Timestamp timestampAttr required;
    field Time timeAttr required;
    field MyEnum enumAttr required;
}

entity ParentDefaultD {
    field Integer integerAttr default:1;
    field Scaled scaledAttr default:2.34;
    field String stringAttr default:"test";
    field PhoneNumber regexAttr default:"+36 (30) 123 1234";
    field Boolean boolAttr default:true;
    field Date dateAttr default:`2022-07-11`;
    field Timestamp timestampAttr default:`2022-07-11T19:09:33Z`;
    field Time timeAttr default:`23:59:59`;
    field Time shortTimeAttr default:`23:59`;
    field MyEnum enumAttr default:MyEnum#Bombastic;
}

entity ParentAbstract abstract {
    field String nameAbstract;
}

entity RelationEntity {
	field Integer number default:1 ;
	field String name;
}

entity CompositionEntity {
	field Integer number default:1 ;
	field String name;
}

entity E extends ParentA {
    field String nameE;
}

entity F extends ParentA,ParentB,ParentAbstract {
}

entity G extends E,ParentB {
}

entity H extends ParentRequiredC {
}

entity I extends ParentDefaultD {

}

transfer ParentATransfer(ParentA parenta) {
    field String nameA <=> parenta.nameA;
    relation RelationTransfer[] relationTransfers <= parenta.relationEntities eager:true create:true;
    relation CompositionTransfer `entity` <= parenta.`entity` eager:true create:true;
}

transfer RelationTransfer(RelationEntity `entity`) {
	field String name <=> `entity`.name;
    event create eventCreate;
}

transfer CompositionTransfer(CompositionEntity `entity`) {
	field String name <=> `entity`.name;
    event create eventCreate;
}

transfer transferE(E `entity`) {
    field String nameA <=> `entity`.nameA;
    field String nameE <=> `entity`.nameE;
}

transfer ParentBTransfer(ParentB `entity`) {
    field String nameB <=> `entity`.nameB;
}
