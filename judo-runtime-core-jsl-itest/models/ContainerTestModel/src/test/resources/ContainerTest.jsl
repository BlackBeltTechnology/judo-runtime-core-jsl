model ContainerTest;

type string String min-size:0 max-size:255;

entity A {
    field C conA required;
}

entity B extends A {
    field D donB required;
}

entity C {
    relation A containerA <= self.container(type = A);
    relation B containerB <= self.container(type = A).asType(type = B);
    relation B containerB1 <= self.container(type = B);
}

entity D {
    relation A containerA <= self.container(type = B).asType(type = A);
    relation A containerA1 <= self.container(type = A);
    relation B containerB <= self.container(type = B);
}

// TRANSFER representation

transfer TA maps A as a {
    relation TC conA <= a.conA eager:true required create:true;
}

transfer TB maps B as b {
    relation TD donB <= b.donB required eager:true create:true;
    relation TC conA <= b.conA required eager:true create:true;
}

transfer TC maps C as c {
    relation TA containerA <= c.containerA;
    relation TB containerB <= c.containerB;
    relation TB containerB1 <= c.containerB1;

	event create `create`;
}

transfer TD maps D as d {
    relation TA containerA <= d.containerA;
    relation TA containerA1 <= d.containerA1;
    relation TB containerB <= d.containerB;

	event create `create`;
}


// Transaction model

entity Partner {
  field ServicePrice[] servicePrices;
}
entity ServicePrice {}

entity StockTransaction {
  field AdditionalService[] additionalServices;
  relation Partner client required;
}

entity AdditionalService {
  relation ServicePrice servicePrice;
  relation ServicePrice[] servicePriceDerived <= self.container(type = StockTransaction).client.servicePrices;
}

transfer TPartner (Partner p) {
    relation TServicePrice[] servicePrices <= p.servicePrices eager:true create:true;
}

transfer TServicePrice (ServicePrice s) {
	event create `create`;
}

transfer TStockTransaction (StockTransaction s) {
  relation TAdditionalService[] additionalServices <= s.additionalServices eager:true create:true;
  relation TPartner client <= s.client required choices:Partner.all();
}

transfer TAdditionalService (AdditionalService a) {
  relation TServicePrice servicePrice <= a.servicePrice choices : a.servicePriceDerived;
  
  event create `create`;
}
