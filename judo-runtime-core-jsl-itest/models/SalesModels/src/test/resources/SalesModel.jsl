model SalesModel;

import SalesModelContract as SC;

type numeric Integer precision:9 scale:0;
type string String min-size:0 max-size:128;
type string PhoneNumber min-size:0 max-size:32 regex:"^(\\+\\d{1,2}\\s)?\\(?\\d{2,3}\\)?[\\s.-]\\d{3}[\\s.-]\\d{4}$";   // escape sequencing does not work in regexp....
type boolean Boolean;

type date Date;
type timestamp Timestamp;
type binary Binary mime-type:["text/plain"] max-file-size:1 GB;

error MyError {
	field Integer code;
	field String msg default:"Internal Server Error";
}

error MyExtendedError {
	field Integer code default:0;
	field String msg default:"Internal Server Error";
	field Integer extra;
}

enum LeadStatus {
	OPPORTUNITY = 0;
	LEAD = 1;
	PROJECT = 2;
}

entity abstract Person {
	field String firstName;
	field String lastName;
	relation Lead[] leadsNoOpposite;

	field	String fullName <= self.firstName + " "
		+ self.lastName ;
}

/*
query Lead[] rootAllLeadsBetween(Integer min = 0, Integer max = 100) <= Lead.filter(l | l.value > min and  l.value < max);
query Integer rootCountAllLeadsBetween(Integer min = 0, Integer max = 100) <= Lead.filter(l | l.value > min and  l.value < max).size();

entity Queries {
	query Lead[] queriesAllLeadsBetween(Integer min = 0, Integer max = 100) <= Lead.filter(l | l.value > min and  l.value < max);
	query Integer queriesCountAllLeadsBetween(Integer min = 0, Integer max = 100) <= Lead.filter(l | l.value > min and  l.value < max).size();	
}
*/

entity SalesPerson extends Person {
	relation Lead[] leads opposite:salesPerson;
	relation Lead[] leadsOver10 <= self.leadsOver(limit = 10);
	field Integer numberOfLeads <= self.leads.size();
	relation SC::Contract[] contracts opposite-add:salesPerson;
}

query Lead[] leadsOver(Integer limit = 100) on SalesPerson <= self.leads.filter(lead | lead.value > limit);
query Lead[] leadsBetween(Integer min = 0, Integer max = 100) on SalesPerson <=
	self.leads.filter(l | l.value > min and  l.value < max);

entity Lead {
	field Integer value default:100000;

	relation required SalesPerson salesPerson opposite:leads;
	relation SC::Contract contract opposite-add:lead;

	//constraint ValueMoreThan10 self.value > 10 onerror MyError(code = 10, msg = "Error message");
}

entity Customer {
	identifier required String name;

	relation Lead lead opposite-add:customer;
}

entity ContractsAggregator {
	
    relation SC::ContractDetail[] contractDetails <= SC::Contract.all().detail;

    relation SC::Contract[] contracts <= SC::Contract.all();
}
