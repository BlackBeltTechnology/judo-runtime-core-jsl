@startuml test1::SalesModel
'!pragma layout smetana
'left to right direction

skinparam nodesep 50
skinparam ranksep 100

hide circle
hide stereotype

skinparam padding 2
skinparam roundCorner 8
skinparam linetype ortho

skinparam class {
	BackgroundColor #moccasin
	BorderColor #grey
	ArrowColor #black

	FontSize 13
	FontStyle bold

	BackgroundColor<< Abstract >> white|#cfe3e8
	HeaderBackgroundColor<< Abstract >> #cee2e6/#bed8df
	FontStyle<< Abstract >> italic

	BackgroundColor<< Entity >> white|#cfe3e8
	HeaderBackgroundColor<< Entity >> #cee2e6/#bed8df

	BackgroundColor<< Enumeration >> white|#d6e6c8
	HeaderBackgroundColor<< Enumeration >> #d6e6c8/#c8e0be

	BackgroundColor<< Error >> white|#e69987
	HeaderBackgroundColor<< Error >> #d69080
	FontStyle<< Error >> normal

	BackgroundColor<< numeric >> white|#d6e6c8
	HeaderBackgroundColor<< numeric >> #d6e6c8/#c8e0be

	BackgroundColor<< string >> white|#d6e6c8
	HeaderBackgroundColor<< string >> #d6e6c8/#c8e0be

	BackgroundColor<< date >> white|#d6e6c8
	HeaderBackgroundColor<< date >> #d6e6c8/#c8e0be

	BackgroundColor<< timestamp >> white|#d6e6c8
	HeaderBackgroundColor<< timestamp >> #d6e6c8/#c8e0be

	BackgroundColor<< time >> white|#d6e6c8
	HeaderBackgroundColor<< time >> #d6e6c8/#c8e0be

	BackgroundColor<< binary >> white|#d6e6c8
	HeaderBackgroundColor<< binary >> #d6e6c8/#c8e0be

	BackgroundColor<< boolean >> white|#d6e6c8
	HeaderBackgroundColor<< boolean >> #d6e6c8/#c8e0be

	BackgroundColor<< External >> white|#efefef
	HeaderBackgroundColor<< External >> #dedede/#d7d7d7
	FontColor<< External >> #7f7f7f
	AttributeFontColor<< External >> #7f7f7f		
}

skinparam package<<DataTypes>> {
	borderColor Transparent
	backgroundColor Transparent
	fontColor Transparent
	stereotypeFontColor Transparent
}	

package test1::SalesModel {

together {
	class Integer <<  numeric >>
	show Integer stereotype
	hide Integer empty members
	class String <<  string >>
	show String stereotype
	hide String empty members
	class PhoneNumber <<  string >>
	show PhoneNumber stereotype
	hide PhoneNumber empty members
	class Boolean <<  boolean >>
	show Boolean stereotype
	hide Boolean empty members
	class Date <<  date >>
	show Date stereotype
	hide Date empty members
	class Timestamp <<  timestamp >>
	show Timestamp stereotype
	hide Timestamp empty members
	class Binary <<  binary >>
	show Binary stereotype
	hide Binary empty members

	class LeadStatus <<  Enumeration >> {
		<b>OPPORTUNITY</b> = 0
		<b>LEAD</b> = 1
		<b>PROJECT</b> = 2
	}
	hide LeadStatus empty members
}

together {
	class MyError <<  Error >>  {
		+code : Integer
		+msg : String
	}
	hide MyError empty members
	class MyExtendedError <<  Error >>  extends MyError {
		+extra : Integer
	}
	hide MyExtendedError empty members
}

together {
	class Person <<  Abstract >>   {
		+firstName : String
		+lastName : String
		~<i>fullName</i> : String
	}
	class SalesPerson << Entity >> extends Person {
		~<i>leadsOver10</i> : Customer[0..*]
		~leadsOver(limit : Integer = 100) : Customer[0..*]
	}
	class Lead << Entity >>  {
		+value : Integer
		-MyError(code = 10, msg = "Error message")
	}
	class Customer << Entity >>  {
		+<u><b>name</b></u> : String
	}
	

	Person  -->  "leadsNoOpposite\n[0..*]" Lead
	SalesPerson  "salesPerson\n[1..1]" --   "leads\n[0..*]" Lead
	Customer  "customer\n[0..1]" --   "lead\n[0..1]" Lead


}

@enduml
